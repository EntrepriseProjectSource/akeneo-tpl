<?php

namespace ContainerRWxfJwK;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getAkeneo_Pim_Enrichment_Factory_ReadValueCollectionService extends KernelProdContainer
{
    /*
     * Gets the private 'akeneo.pim.enrichment.factory.read_value_collection' shared service.
     *
     * @return \Akeneo\Pim\Enrichment\Component\Product\Factory\ReadValueCollectionFactory
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Pim/Enrichment/Component/Product/Factory/ReadValueCollectionFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Pim/Enrichment/Component/Product/Factory/NonExistentValuesFilter/ChainedNonExistentValuesFilterInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Pim/Enrichment/Component/Product/Factory/NonExistentValuesFilter/ChainedNonExistentValuesFilter.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Pim/Enrichment/Component/Product/Factory/NonExistentValuesFilter/NonExistentValuesFilter.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Pim/Enrichment/Component/Product/Factory/NonExistentValuesFilter/NonExistentChannelLocaleValuesFilter.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Pim/Enrichment/Component/Product/Factory/TransformRawValuesCollections.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Pim/Enrichment/Component/Product/Factory/EmptyValuesCleaner.php';

        $a = ($container->privates['akeneo.pim.enrichment.factory.value'] ?? $container->load('getAkeneo_Pim_Enrichment_Factory_ValueService'));

        if (isset($container->privates['akeneo.pim.enrichment.factory.read_value_collection'])) {
            return $container->privates['akeneo.pim.enrichment.factory.read_value_collection'];
        }
        $b = ($container->privates['akeneo.pim.structure.query.get_attributes'] ?? $container->load('getAkeneo_Pim_Structure_Query_GetAttributesService'));

        if (isset($container->privates['akeneo.pim.enrichment.factory.read_value_collection'])) {
            return $container->privates['akeneo.pim.enrichment.factory.read_value_collection'];
        }
        $c = ($container->privates['pim_channel.query.cache.channel_exists_with_locale'] ?? $container->load('getPimChannel_Query_Cache_ChannelExistsWithLocaleService'));

        if (isset($container->privates['akeneo.pim.enrichment.factory.read_value_collection'])) {
            return $container->privates['akeneo.pim.enrichment.factory.read_value_collection'];
        }

        return $container->privates['akeneo.pim.enrichment.factory.read_value_collection'] = new \Akeneo\Pim\Enrichment\Component\Product\Factory\ReadValueCollectionFactory($a, $b, new \Akeneo\Pim\Enrichment\Component\Product\Factory\NonExistentValuesFilter\ChainedNonExistentValuesFilter(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['akeneo.pim.enrichment.factory.non_existent_values_filter.simple_select'] ?? $container->load('getAkeneo_Pim_Enrichment_Factory_NonExistentValuesFilter_SimpleSelectService'));
            yield 1 => ($container->privates['akeneo.pim.enrichment.factory.non_existent_values_filter.multi_select'] ?? $container->load('getAkeneo_Pim_Enrichment_Factory_NonExistentValuesFilter_MultiSelectService'));
            yield 2 => ($container->privates['akeneo.pim.enrichment.factory.non_existent_values_filter.reference_data_simple_select'] ?? $container->load('getAkeneo_Pim_Enrichment_Factory_NonExistentValuesFilter_ReferenceDataSimpleSelectService'));
            yield 3 => ($container->privates['akeneo.pim.enrichment.factory.non_existent_values_filter.reference_data_multi_select'] ?? $container->load('getAkeneo_Pim_Enrichment_Factory_NonExistentValuesFilter_ReferenceDataMultiSelectService'));
            yield 4 => ($container->privates['akeneo.pim.enrichment.factory.non_existent_values_filter.price_collection'] ?? $container->load('getAkeneo_Pim_Enrichment_Factory_NonExistentValuesFilter_PriceCollectionService'));
            yield 5 => ($container->privates['akeneo.pim.enrichment.factory.non_existent_values_filter.file'] ?? $container->load('getAkeneo_Pim_Enrichment_Factory_NonExistentValuesFilter_FileService'));
        }, 6), new \Akeneo\Pim\Enrichment\Component\Product\Factory\NonExistentValuesFilter\NonExistentChannelLocaleValuesFilter($c, $c, $c, $b), ($container->services['akeneo.pim.enrichment.factory.empty_values_cleaner'] ?? ($container->services['akeneo.pim.enrichment.factory.empty_values_cleaner'] = new \Akeneo\Pim\Enrichment\Component\Product\Factory\EmptyValuesCleaner())), new \Akeneo\Pim\Enrichment\Component\Product\Factory\TransformRawValuesCollections($b)), ($container->privates['monolog.logger'] ?? $container->load('getMonolog_LoggerService')));
    }
}
