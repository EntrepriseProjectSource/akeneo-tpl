<?php

namespace ContainerRWxfJwK;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getPimEnrich_Controller_JobTrackerService extends KernelProdContainer
{
    /*
     * Gets the public 'pim_enrich.controller.job_tracker' shared service.
     *
     * @return \Akeneo\Platform\Bundle\ImportExportBundle\Controller\Ui\JobTrackerController
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Platform/Bundle/ImportExportBundle/Controller/Ui/JobTrackerController.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Tool/Component/Batch/Query/SqlUpdateJobExecutionStatus.php';

        return $container->services['pim_enrich.controller.job_tracker'] = new \Akeneo\Platform\Bundle\ImportExportBundle\Controller\Ui\JobTrackerController(($container->services['event_dispatcher'] ?? $container->getEventDispatcherService()), ($container->privates['pim_enrich.repository.job_execution'] ?? $container->load('getPimEnrich_Repository_JobExecutionService')), ($container->privates['pim_connector.event_listener.archivist'] ?? $container->load('getPimConnector_EventListener_ArchivistService')), ($container->privates['oro_security.security_facade'] ?? $container->getOroSecurity_SecurityFacadeService()), ['import' => 'pim_importexport_import_profile_show', 'export' => 'pim_importexport_export_profile_show'], new \Akeneo\Tool\Component\Batch\Query\SqlUpdateJobExecutionStatus(($container->services['doctrine.dbal.default_connection'] ?? $container->getDoctrine_Dbal_DefaultConnectionService())), ($container->services['akeneo_batch.job.job_registry'] ?? $container->load('getAkeneoBatch_Job_JobRegistryService')), ($container->privates['monolog.logger'] ?? $container->load('getMonolog_LoggerService')), ($container->services['oneup_flysystem.archivist_filesystem'] ?? $container->load('getOneupFlysystem_ArchivistFilesystemService')));
    }
}
