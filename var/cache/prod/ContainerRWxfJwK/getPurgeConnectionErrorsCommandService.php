<?php

namespace ContainerRWxfJwK;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getPurgeConnectionErrorsCommandService extends KernelProdContainer
{
    /*
     * Gets the private 'Akeneo\Connectivity\Connection\Infrastructure\ErrorManagement\Command\PurgeConnectionErrorsCommand' shared service.
     *
     * @return \Akeneo\Connectivity\Connection\Infrastructure\ErrorManagement\Command\PurgeConnectionErrorsCommand
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Connectivity/Connection/back/Infrastructure/ErrorManagement/Command/PurgeConnectionErrorsCommand.php';

        $container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\ErrorManagement\\Command\\PurgeConnectionErrorsCommand'] = $instance = new \Akeneo\Connectivity\Connection\Infrastructure\ErrorManagement\Command\PurgeConnectionErrorsCommand(($container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\ErrorManagement\\Persistence\\SelectAllAuditableConnectionCodeQuery'] ?? $container->load('getSelectAllAuditableConnectionCodeQueryService')), ($container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\ErrorManagement\\Persistence\\PurgeConnectionErrorsQuery'] ?? $container->load('getPurgeConnectionErrorsQueryService')), ($container->privates['monolog.logger'] ?? $container->load('getMonolog_LoggerService')));

        $instance->setName('akeneo:connectivity-connection:purge-error');
        $instance->setDescription('Purge connection errors over 100 and older than a week');

        return $instance;
    }
}
