<?php

namespace ContainerRWxfJwK;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getGetProductUuidsHandlerService extends KernelProdContainer
{
    /*
     * Gets the private 'Akeneo\Catalogs\Application\Handler\GetProductUuidsHandler' shared autowired service.
     *
     * @return \Akeneo\Catalogs\Application\Handler\GetProductUuidsHandler
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/components/catalogs/back/src/Application/Handler/GetProductUuidsHandler.php';

        $a = ($container->privates['Akeneo\\Catalogs\\Infrastructure\\Persistence\\Catalog\\GetCatalogQuery'] ?? $container->load('getGetCatalogQueryService'));

        if (isset($container->privates['Akeneo\\Catalogs\\Application\\Handler\\GetProductUuidsHandler'])) {
            return $container->privates['Akeneo\\Catalogs\\Application\\Handler\\GetProductUuidsHandler'];
        }
        $b = ($container->privates['Akeneo\\Catalogs\\Infrastructure\\Persistence\\Catalog\\DisableCatalogQuery'] ?? $container->load('getDisableCatalogQueryService'));

        if (isset($container->privates['Akeneo\\Catalogs\\Application\\Handler\\GetProductUuidsHandler'])) {
            return $container->privates['Akeneo\\Catalogs\\Application\\Handler\\GetProductUuidsHandler'];
        }
        $c = ($container->privates['Akeneo\\Catalogs\\Infrastructure\\Validation\\IsCatalogValid'] ?? $container->load('getIsCatalogValidService'));

        if (isset($container->privates['Akeneo\\Catalogs\\Application\\Handler\\GetProductUuidsHandler'])) {
            return $container->privates['Akeneo\\Catalogs\\Application\\Handler\\GetProductUuidsHandler'];
        }
        $d = ($container->privates['Akeneo\\Catalogs\\Infrastructure\\Service\\DispatchInvalidCatalogDisabledEvent'] ?? $container->load('getDispatchInvalidCatalogDisabledEventService'));

        if (isset($container->privates['Akeneo\\Catalogs\\Application\\Handler\\GetProductUuidsHandler'])) {
            return $container->privates['Akeneo\\Catalogs\\Application\\Handler\\GetProductUuidsHandler'];
        }

        return $container->privates['Akeneo\\Catalogs\\Application\\Handler\\GetProductUuidsHandler'] = new \Akeneo\Catalogs\Application\Handler\GetProductUuidsHandler(($container->privates['Akeneo\\Catalogs\\Infrastructure\\Persistence\\Catalog\\Product\\GetProductUuidsQuery'] ?? $container->load('getGetProductUuidsQueryService')), $a, $b, $c, $d);
    }
}
