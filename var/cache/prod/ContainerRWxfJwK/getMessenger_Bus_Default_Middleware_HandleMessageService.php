<?php

namespace ContainerRWxfJwK;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getMessenger_Bus_Default_Middleware_HandleMessageService extends KernelProdContainer
{
    /*
     * Gets the private 'messenger.bus.default.middleware.handle_message' shared service.
     *
     * @return \Symfony\Component\Messenger\Middleware\HandleMessageMiddleware
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Middleware/MiddlewareInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Middleware/HandleMessageMiddleware.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlersLocatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlersLocator.php';

        $container->privates['messenger.bus.default.middleware.handle_message'] = $instance = new \Symfony\Component\Messenger\Middleware\HandleMessageMiddleware(new \Symfony\Component\Messenger\Handler\HandlersLocator(['Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.tGvt0LH'] ?? $container->load('get_Messenger_HandlerDescriptor_TGvt0LHService'));
        }, 1), 'Akeneo\\Tool\\Component\\BatchQueue\\Queue\\JobExecutionMessageInterface' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.3_3_yBN'] ?? $container->load('get_Messenger_HandlerDescriptor_33YBNService'));
        }, 1), 'Akeneo\\Tool\\Component\\BatchQueue\\Queue\\ScheduledJobMessageInterface' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.QViqFoA'] ?? $container->load('get_Messenger_HandlerDescriptor_QViqFoAService'));
        }, 1), 'Akeneo\\Platform\\Component\\EventQueue\\BulkEventInterface' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.sZXM69N'] ?? $container->load('get_Messenger_HandlerDescriptor_SZXM69NService'));
        }, 1), 'Akeneo\\Catalogs\\ServiceAPI\\Command\\CreateCatalogCommand' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.PFS8ca3'] ?? $container->load('get_Messenger_HandlerDescriptor_PFS8ca3Service'));
        }, 1), 'Akeneo\\Catalogs\\ServiceAPI\\Command\\DeleteCatalogCommand' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.z8T.TXr'] ?? $container->load('get_Messenger_HandlerDescriptor_Z8T_TXrService'));
        }, 1), 'Akeneo\\Catalogs\\ServiceAPI\\Command\\DeleteProductMappingSchemaCommand' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.tcraN0p'] ?? $container->load('get_Messenger_HandlerDescriptor_TcraN0pService'));
        }, 1), 'Akeneo\\Catalogs\\ServiceAPI\\Query\\GetCatalogQuery' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.FrNPxY9'] ?? $container->load('get_Messenger_HandlerDescriptor_FrNPxY9Service'));
        }, 1), 'Akeneo\\Catalogs\\ServiceAPI\\Query\\GetCatalogsByOwnerUsernameQuery' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.EYp0FgV'] ?? $container->load('get_Messenger_HandlerDescriptor_EYp0FgVService'));
        }, 1), 'Akeneo\\Catalogs\\ServiceAPI\\Query\\GetMappedProductsQuery' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.nPsQxW_'] ?? $container->load('get_Messenger_HandlerDescriptor_NPsQxWService'));
        }, 1), 'Akeneo\\Catalogs\\ServiceAPI\\Query\\GetProductQuery' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.tZ9fnbk'] ?? $container->load('get_Messenger_HandlerDescriptor_TZ9fnbkService'));
        }, 1), 'Akeneo\\Catalogs\\ServiceAPI\\Query\\GetProductIdentifiersQuery' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.Q0.zaMh'] ?? $container->load('get_Messenger_HandlerDescriptor_Q0_ZaMhService'));
        }, 1), 'Akeneo\\Catalogs\\ServiceAPI\\Query\\GetProductMappingSchemaQuery' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.FOuv8NT'] ?? $container->load('get_Messenger_HandlerDescriptor_FOuv8NTService'));
        }, 1), 'Akeneo\\Catalogs\\ServiceAPI\\Query\\GetProductUuidsQuery' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.xb3KSzu'] ?? $container->load('get_Messenger_HandlerDescriptor_Xb3KSzuService'));
        }, 1), 'Akeneo\\Catalogs\\ServiceAPI\\Query\\GetProductsQuery' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.jABGa43'] ?? $container->load('get_Messenger_HandlerDescriptor_JABGa43Service'));
        }, 1), 'Akeneo\\Catalogs\\ServiceAPI\\Command\\UpdateCatalogCommand' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.BpVs6z4'] ?? $container->load('get_Messenger_HandlerDescriptor_BpVs6z4Service'));
        }, 1), 'Akeneo\\Catalogs\\ServiceAPI\\Command\\UpdateProductMappingSchemaCommand' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.uzgbp8s'] ?? $container->load('get_Messenger_HandlerDescriptor_Uzgbp8sService'));
        }, 1)]));

        $instance->setLogger(($container->privates['monolog.logger.messenger'] ?? $container->load('getMonolog_Logger_MessengerService')));

        return $instance;
    }
}
