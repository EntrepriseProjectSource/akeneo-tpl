<?php

namespace ContainerRWxfJwK;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getPimVolumeMonitoring_Controller_VolumeMonitoringService extends KernelProdContainer
{
    /*
     * Gets the public 'pim_volume_monitoring.controller.volume_monitoring' shared service.
     *
     * @return \Akeneo\Platform\Bundle\CatalogVolumeMonitoringBundle\Controller\VolumeMonitoringController
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Platform/Bundle/CatalogVolumeMonitoringBundle/Controller/VolumeMonitoringController.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Platform/Component/CatalogVolumeMonitoring/Volume/Normalizer/Volumes.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Platform/Component/CatalogVolumeMonitoring/Volume/Normalizer/CountVolumeNormalizer.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Platform/Component/CatalogVolumeMonitoring/Volume/Normalizer/AverageMaxVolumesNormalizer.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Platform/Component/CatalogVolumeMonitoring/Volume/Query/AverageMaxQuery.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Platform/Bundle/CatalogVolumeMonitoringBundle/Persistence/Query/Sql/AggregatedAverageMaxOptionsPerAttribute.php';

        $a = new \Akeneo\Platform\Component\CatalogVolumeMonitoring\Volume\Normalizer\Volumes(new \Akeneo\Platform\Component\CatalogVolumeMonitoring\Volume\Normalizer\CountVolumeNormalizer(), new \Akeneo\Platform\Component\CatalogVolumeMonitoring\Volume\Normalizer\AverageMaxVolumesNormalizer(), ($container->services['feature_flags'] ?? $container->getFeatureFlagsService()));
        $a->addCountVolumeQuery(($container->privates['pim_volume_monitoring.persistence.query.count_attributes'] ?? $container->load('getPimVolumeMonitoring_Persistence_Query_CountAttributesService')), NULL);
        $a->addCountVolumeQuery(($container->privates['pim_volume_monitoring.persistence.query.count_categories'] ?? $container->load('getPimVolumeMonitoring_Persistence_Query_CountCategoriesService')), NULL);
        $a->addCountVolumeQuery(($container->privates['pim_volume_monitoring.persistence.query.count_category_trees'] ?? $container->load('getPimVolumeMonitoring_Persistence_Query_CountCategoryTreesService')), NULL);
        $a->addCountVolumeQuery(($container->privates['pim_volume_monitoring.persistence.query.count_channels'] ?? $container->load('getPimVolumeMonitoring_Persistence_Query_CountChannelsService')), NULL);
        $a->addCountVolumeQuery(($container->privates['pim_volume_monitoring.persistence.query.count_families'] ?? $container->load('getPimVolumeMonitoring_Persistence_Query_CountFamiliesService')), NULL);
        $a->addCountVolumeQuery(($container->privates['pim_volume_monitoring.persistence.query.count_locales'] ?? $container->load('getPimVolumeMonitoring_Persistence_Query_CountLocalesService')), NULL);
        $a->addCountVolumeQuery(($container->privates['pim_volume_monitoring.persistence.query.count_localizable_and_scopable_attributes'] ?? $container->load('getPimVolumeMonitoring_Persistence_Query_CountLocalizableAndScopableAttributesService')), NULL);
        $a->addCountVolumeQuery(($container->privates['pim_volume_monitoring.persistence.query.count_localizable_attributes'] ?? $container->load('getPimVolumeMonitoring_Persistence_Query_CountLocalizableAttributesService')), NULL);
        $a->addCountVolumeQuery(($container->privates['pim_volume_monitoring.persistence.query.count_scopable_attributes'] ?? $container->load('getPimVolumeMonitoring_Persistence_Query_CountScopableAttributesService')), NULL);
        $a->addCountVolumeQuery(($container->privates['pim_volume_monitoring.persistence.query.count_products'] ?? $container->load('getPimVolumeMonitoring_Persistence_Query_CountProductsService')), NULL);
        $a->addCountVolumeQuery(($container->privates['pim_volume_monitoring.persistence.query.count_product_models'] ?? $container->load('getPimVolumeMonitoring_Persistence_Query_CountProductModelsService')), NULL);
        $a->addCountVolumeQuery(($container->privates['pim_volume_monitoring.persistence.query.count_variant_products'] ?? $container->load('getPimVolumeMonitoring_Persistence_Query_CountVariantProductsService')), NULL);
        $a->addCountVolumeQuery(($container->privates['pim_volume_monitoring.persistence.query.aggregated_count_product_and_product_model_values'] ?? $container->load('getPimVolumeMonitoring_Persistence_Query_AggregatedCountProductAndProductModelValuesService')), NULL);
        $a->addAverageMaxVolumeQuery(($container->privates['pim_volume_monitoring.persistence.query.average_max_attributes_per_family'] ?? $container->load('getPimVolumeMonitoring_Persistence_Query_AverageMaxAttributesPerFamilyService')), NULL);
        $a->addAverageMaxVolumeQuery(new \Akeneo\Platform\Bundle\CatalogVolumeMonitoringBundle\Persistence\Query\Sql\AggregatedAverageMaxOptionsPerAttribute(($container->services['doctrine.dbal.default_connection'] ?? $container->getDoctrine_Dbal_DefaultConnectionService())), NULL);
        $a->addAverageMaxVolumeQuery(($container->privates['pim_volume_monitoring.persistence.query.aggregated_average_max_product_and_product_model_values'] ?? $container->load('getPimVolumeMonitoring_Persistence_Query_AggregatedAverageMaxProductAndProductModelValuesService')), NULL);

        return $container->services['pim_volume_monitoring.controller.volume_monitoring'] = new \Akeneo\Platform\Bundle\CatalogVolumeMonitoringBundle\Controller\VolumeMonitoringController($a, ($container->privates['oro_security.security_facade'] ?? $container->getOroSecurity_SecurityFacadeService()));
    }
}
