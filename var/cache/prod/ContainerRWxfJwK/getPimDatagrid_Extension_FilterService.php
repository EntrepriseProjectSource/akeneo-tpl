<?php

namespace ContainerRWxfJwK;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getPimDatagrid_Extension_FilterService extends KernelProdContainer
{
    /*
     * Gets the private 'pim_datagrid.extension.filter' shared service.
     *
     * @return \Oro\Bundle\PimDataGridBundle\Extension\Filter\FilterExtension
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Oro/Bundle/DataGridBundle/Extension/ExtensionVisitorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Oro/Bundle/DataGridBundle/Extension/AbstractExtension.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Oro/Bundle/PimDataGridBundle/Extension/Filter/FilterExtension.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Oro/Bundle/PimDataGridBundle/Datasource/DatasourceAdapterResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Oro/Bundle/PimDataGridBundle/Datasource/DatasourceAdapterResolver.php';

        $a = new \Oro\Bundle\PimDataGridBundle\Datasource\DatasourceAdapterResolver('Oro\\Bundle\\PimFilterBundle\\Datasource\\Orm\\OrmFilterDatasourceAdapter', 'Oro\\Bundle\\PimFilterBundle\\Datasource\\Orm\\OrmFilterProductDatasourceAdapter');
        $a->addProductDatasource('pim_datasource_product');
        $a->addProductDatasource('pim_datasource_associated_product');
        $a->addProductDatasource('pim_datasource_associated_product_model');
        $a->addProductDatasource('pim_datasource_group_product');
        $a->addProductDatasource('pimee_datasource_published_product');
        $a->addProductDatasource('pimee_datasource_proposal_product');

        $container->privates['pim_datagrid.extension.filter'] = $instance = new \Oro\Bundle\PimDataGridBundle\Extension\Filter\FilterExtension(($container->privates['oro_datagrid.datagrid.request_params'] ?? $container->load('getOroDatagrid_Datagrid_RequestParamsService')), ($container->services['translator'] ?? $container->getTranslatorService()), $a);

        $instance->addFilter('string', ($container->privates['oro_filter.string_filter'] ?? $container->load('getOroFilter_StringFilterService')));
        $instance->addFilter('search', ($container->privates['oro_filter.search_filter'] ?? $container->load('getOroFilter_SearchFilterService')));
        $instance->addFilter('selectrow', ($container->privates['oro_filter.select_row_filter'] ?? $container->load('getOroFilter_SelectRowFilterService')));
        $instance->addFilter('number', ($container->privates['oro_filter.number_filter'] ?? $container->load('getOroFilter_NumberFilterService')));
        $instance->addFilter('percent', ($container->privates['oro_filter.percent_filter'] ?? $container->load('getOroFilter_PercentFilterService')));
        $instance->addFilter('choice', ($container->privates['oro_filter.choice_filter'] ?? $container->load('getOroFilter_ChoiceFilterService')));
        $instance->addFilter('entity', ($container->privates['oro_filter.entity_filter'] ?? $container->load('getOroFilter_EntityFilterService')));
        $instance->addFilter('boolean', ($container->privates['oro_filter.boolean_filter'] ?? $container->load('getOroFilter_BooleanFilterService')));
        $instance->addFilter('date', ($container->privates['oro_filter.date_range_filter'] ?? $container->load('getOroFilter_DateRangeFilterService')));
        $instance->addFilter('datetime', ($container->privates['oro_filter.datetime_range_filter'] ?? $container->load('getOroFilter_DatetimeRangeFilterService')));
        $instance->addFilter('ajax_choice', ($container->privates['pim_filter.ajax_choice_filter'] ?? $container->load('getPimFilter_AjaxChoiceFilterService')));
        $instance->addFilter('product_scope', ($container->privates['pim_filter.product_scope_filter'] ?? $container->load('getPimFilter_ProductScopeFilterService')));
        $instance->addFilter('product_category', ($container->privates['pim_filter.product_category_filter'] ?? $container->load('getPimFilter_ProductCategoryFilterService')));
        $instance->addFilter('product_groups', ($container->privates['pim_filter.product_groups_filter'] ?? $container->load('getPimFilter_ProductGroupsFilterService')));
        $instance->addFilter('product_family', ($container->privates['pim_filter.product_family_filter'] ?? $container->load('getPimFilter_ProductFamilyFilterService')));
        $instance->addFilter('product_completeness', ($container->privates['pim_filter.product_completeness_filter'] ?? $container->load('getPimFilter_ProductCompletenessFilterService')));
        $instance->addFilter('product_and_product_model_completeness', ($container->privates['pim_filter.product_and_product_model_completeness_filter'] ?? $container->load('getPimFilter_ProductAndProductModelCompletenessFilterService')));
        $instance->addFilter('product_date', ($container->privates['pim_filter.product_date_filter'] ?? $container->load('getPimFilter_ProductDateFilterService')));
        $instance->addFilter('product_enabled', ($container->privates['pim_filter.product_enabled_filter'] ?? $container->load('getPimFilter_ProductEnabledFilterService')));
        $instance->addFilter('product_typology', ($container->privates['pim_filter.product_typology_filter'] ?? $container->load('getPimFilter_ProductTypologyFilterService')));
        $instance->addFilter('entity_type', ($container->privates['pim_filter.entity_type_filter'] ?? $container->load('getPimFilter_EntityTypeFilterService')));
        $instance->addFilter('product_in_group', ($container->privates['pim_filter.product_in_group_filter'] ?? $container->load('getPimFilter_ProductInGroupFilterService')));
        $instance->addFilter('product_is_associated', ($container->privates['pim_filter.product_is_associated_filter'] ?? $container->load('getPimFilter_ProductIsAssociatedFilterService')));
        $instance->addFilter('product_value_string', ($container->privates['pim_filter.product_value_string'] ?? $container->load('getPimFilter_ProductValueStringService')));
        $instance->addFilter('product_value_choice', ($container->privates['pim_filter.product_value_choice'] ?? $container->load('getPimFilter_ProductValueChoiceService')));
        $instance->addFilter('product_value_number', ($container->privates['pim_filter.product_value_number'] ?? $container->load('getPimFilter_ProductValueNumberService')));
        $instance->addFilter('product_value_date', ($container->privates['pim_filter.product_value_date'] ?? $container->load('getPimFilter_ProductValueDateService')));
        $instance->addFilter('product_value_datetime', ($container->privates['pim_filter.product_value_datetime'] ?? $container->load('getPimFilter_ProductValueDatetimeService')));
        $instance->addFilter('product_value_boolean', ($container->privates['pim_filter.product_value_boolean'] ?? $container->load('getPimFilter_ProductValueBooleanService')));
        $instance->addFilter('product_value_metric', ($container->privates['pim_filter.product_value_metric'] ?? $container->load('getPimFilter_ProductValueMetricService')));
        $instance->addFilter('product_value_price', ($container->privates['pim_filter.product_value_price'] ?? $container->load('getPimFilter_ProductValuePriceService')));
        $instance->addFilter('label_or_identifier', ($container->privates['pim_filter.product_label_or_identifier_filter'] ?? $container->load('getPimFilter_ProductLabelOrIdentifierFilterService')));
        $instance->addFilter('product_value_reference_data', ($container->privates['pim_reference_data.filter.reference_data'] ?? $container->load('getPimReferenceData_Filter_ReferenceDataService')));
        $instance->addFilter('datagrid_attribute_family_filter', ($container->privates['Akeneo\\Pim\\Structure\\Bundle\\Datagrid\\Attribute\\FamilyFilter'] ?? $container->load('getFamilyFilterService')));
        $instance->addFilter('data_quality_insights_score', ($container->privates['Akeneo\\Pim\\Automation\\DataQualityInsights\\Infrastructure\\ProductGrid\\QualityScoreFilter'] ?? $container->load('getQualityScoreFilter2Service')));
        $instance->addFilter('data_quality_insights_enrichment_quality', ($container->privates['akeneo.pim.automation.data_quality_insights.product_grid.filter.enrichment_quality'] ?? $container->load('getAkeneo_Pim_Automation_DataQualityInsights_ProductGrid_Filter_EnrichmentQualityService')));
        $instance->addFilter('data_quality_insights_images_quality', ($container->privates['akeneo.pim.automation.data_quality_insights.product_grid.filter.image_quality'] ?? $container->load('getAkeneo_Pim_Automation_DataQualityInsights_ProductGrid_Filter_ImageQualityService')));

        return $instance;
    }
}
