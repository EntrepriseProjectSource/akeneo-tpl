<?php

namespace ContainerRWxfJwK;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getAkeneoBatch_Updater_JobInstanceService extends KernelProdContainer
{
    /*
     * Gets the private 'akeneo_batch.updater.job_instance' shared service.
     *
     * @return \Akeneo\Tool\Component\Batch\Updater\JobInstanceUpdater
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Tool/Component/StorageUtils/Updater/ObjectUpdaterInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Tool/Component/Batch/Updater/JobInstanceUpdater.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Tool/Component/Batch/Clock/ClockInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Tool/Component/Batch/Clock/SystemClock.php';

        $a = ($container->services['akeneo_batch.job.job_registry'] ?? $container->load('getAkeneoBatch_Job_JobRegistryService'));

        if (isset($container->privates['akeneo_batch.updater.job_instance'])) {
            return $container->privates['akeneo_batch.updater.job_instance'];
        }
        $b = ($container->privates['Akeneo\\Platform\\Bundle\\ImportExportBundle\\Infrastructure\\UserManagement\\UpsertRunningUser'] ?? $container->load('getUpsertRunningUserService'));

        if (isset($container->privates['akeneo_batch.updater.job_instance'])) {
            return $container->privates['akeneo_batch.updater.job_instance'];
        }

        return $container->privates['akeneo_batch.updater.job_instance'] = new \Akeneo\Tool\Component\Batch\Updater\JobInstanceUpdater(($container->privates['akeneo_batch.job_parameters_factory'] ?? $container->load('getAkeneoBatch_JobParametersFactoryService')), $a, $b, ($container->privates['Akeneo\\Tool\\Component\\Batch\\Clock\\ClockInterface'] ?? ($container->privates['Akeneo\\Tool\\Component\\Batch\\Clock\\ClockInterface'] = new \Akeneo\Tool\Component\Batch\Clock\SystemClock())));
    }
}
