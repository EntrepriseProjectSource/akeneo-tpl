<?php

namespace ContainerRWxfJwK;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getAggregateVolumesCommandService extends KernelProdContainer
{
    /*
     * Gets the private 'Akeneo\Platform\Bundle\CatalogVolumeMonitoringBundle\Command\AggregateVolumesCommand' shared service.
     *
     * @return \Akeneo\Platform\Bundle\CatalogVolumeMonitoringBundle\Command\AggregateVolumesCommand
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Platform/Bundle/CatalogVolumeMonitoringBundle/Command/AggregateVolumesCommand.php';

        $container->privates['Akeneo\\Platform\\Bundle\\CatalogVolumeMonitoringBundle\\Command\\AggregateVolumesCommand'] = $instance = new \Akeneo\Platform\Bundle\CatalogVolumeMonitoringBundle\Command\AggregateVolumesCommand(($container->privates['pim_volume_monitoring.volume.aggregation'] ?? $container->load('getPimVolumeMonitoring_Volume_AggregationService')));

        $instance->setName('pim:volume:aggregate');
        $instance->setDescription('Aggregate the result of all the volume queries that should not be executed live');

        return $instance;
    }
}
