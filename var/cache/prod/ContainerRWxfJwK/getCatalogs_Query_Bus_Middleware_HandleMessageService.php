<?php

namespace ContainerRWxfJwK;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getCatalogs_Query_Bus_Middleware_HandleMessageService extends KernelProdContainer
{
    /*
     * Gets the private 'catalogs.query.bus.middleware.handle_message' shared service.
     *
     * @return \Symfony\Component\Messenger\Middleware\HandleMessageMiddleware
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Middleware/MiddlewareInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Middleware/HandleMessageMiddleware.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlersLocatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlersLocator.php';

        $container->privates['catalogs.query.bus.middleware.handle_message'] = $instance = new \Symfony\Component\Messenger\Middleware\HandleMessageMiddleware(new \Symfony\Component\Messenger\Handler\HandlersLocator(['Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.3m5mLM2'] ?? $container->load('get_Messenger_HandlerDescriptor_3m5mLM2Service'));
        }, 1), 'Akeneo\\Tool\\Component\\BatchQueue\\Queue\\JobExecutionMessageInterface' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.O5K9yj2'] ?? $container->load('get_Messenger_HandlerDescriptor_O5K9yj2Service'));
        }, 1), 'Akeneo\\Tool\\Component\\BatchQueue\\Queue\\ScheduledJobMessageInterface' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.MRr8e6m'] ?? $container->load('get_Messenger_HandlerDescriptor_MRr8e6mService'));
        }, 1), 'Akeneo\\Platform\\Component\\EventQueue\\BulkEventInterface' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.GsEfuhe'] ?? $container->load('get_Messenger_HandlerDescriptor_GsEfuheService'));
        }, 1), 'Akeneo\\Catalogs\\ServiceAPI\\Command\\CreateCatalogCommand' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.FApuuWB'] ?? $container->load('get_Messenger_HandlerDescriptor_FApuuWBService'));
        }, 1), 'Akeneo\\Catalogs\\ServiceAPI\\Command\\DeleteCatalogCommand' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.slswR7E'] ?? $container->load('get_Messenger_HandlerDescriptor_SlswR7EService'));
        }, 1), 'Akeneo\\Catalogs\\ServiceAPI\\Command\\DeleteProductMappingSchemaCommand' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.EZH2gPS'] ?? $container->load('get_Messenger_HandlerDescriptor_EZH2gPSService'));
        }, 1), 'Akeneo\\Catalogs\\ServiceAPI\\Query\\GetCatalogQuery' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.boeI6.U'] ?? $container->load('get_Messenger_HandlerDescriptor_BoeI6_UService'));
        }, 1), 'Akeneo\\Catalogs\\ServiceAPI\\Query\\GetCatalogsByOwnerUsernameQuery' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.1z2UZbn'] ?? $container->load('get_Messenger_HandlerDescriptor_1z2UZbnService'));
        }, 1), 'Akeneo\\Catalogs\\ServiceAPI\\Query\\GetMappedProductsQuery' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.0Dh6n.W'] ?? $container->load('get_Messenger_HandlerDescriptor_0Dh6n_WService'));
        }, 1), 'Akeneo\\Catalogs\\ServiceAPI\\Query\\GetProductQuery' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.bbi00Ks'] ?? $container->load('get_Messenger_HandlerDescriptor_Bbi00KsService'));
        }, 1), 'Akeneo\\Catalogs\\ServiceAPI\\Query\\GetProductIdentifiersQuery' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.JnVgQWk'] ?? $container->load('get_Messenger_HandlerDescriptor_JnVgQWkService'));
        }, 1), 'Akeneo\\Catalogs\\ServiceAPI\\Query\\GetProductMappingSchemaQuery' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.VKLrISi'] ?? $container->load('get_Messenger_HandlerDescriptor_VKLrISiService'));
        }, 1), 'Akeneo\\Catalogs\\ServiceAPI\\Query\\GetProductUuidsQuery' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.RdTXx4.'] ?? $container->load('get_Messenger_HandlerDescriptor_RdTXx4_Service'));
        }, 1), 'Akeneo\\Catalogs\\ServiceAPI\\Query\\GetProductsQuery' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.QDDPt1y'] ?? $container->load('get_Messenger_HandlerDescriptor_QDDPt1yService'));
        }, 1), 'Akeneo\\Catalogs\\ServiceAPI\\Command\\UpdateCatalogCommand' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.PSbiPJJ'] ?? $container->load('get_Messenger_HandlerDescriptor_PSbiPJJService'));
        }, 1), 'Akeneo\\Catalogs\\ServiceAPI\\Command\\UpdateProductMappingSchemaCommand' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.yyDKlXB'] ?? $container->load('get_Messenger_HandlerDescriptor_YyDKlXBService'));
        }, 1)]));

        $instance->setLogger(($container->privates['monolog.logger.messenger'] ?? $container->load('getMonolog_Logger_MessengerService')));

        return $instance;
    }
}
