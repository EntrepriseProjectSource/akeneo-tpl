<?php

namespace ContainerRWxfJwK;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getGetProductsHandlerService extends KernelProdContainer
{
    /*
     * Gets the private 'Akeneo\Catalogs\Application\Handler\GetProductsHandler' shared autowired service.
     *
     * @return \Akeneo\Catalogs\Application\Handler\GetProductsHandler
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/components/catalogs/back/src/Application/Handler/GetProductsHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/components/catalogs/back/src/Application/Persistence/Catalog/Product/GetProductsWithFilteredValuesQueryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/components/catalogs/back/src/Infrastructure/Persistence/Catalog/Product/GetProductsWithFilteredValuesQuery.php';

        $a = ($container->privates['akeneo.pim.enrichment.product.connector.get_product_from_uuids'] ?? $container->load('getAkeneo_Pim_Enrichment_Product_Connector_GetProductFromUuidsService'));

        if (isset($container->privates['Akeneo\\Catalogs\\Application\\Handler\\GetProductsHandler'])) {
            return $container->privates['Akeneo\\Catalogs\\Application\\Handler\\GetProductsHandler'];
        }
        $b = ($container->privates['Akeneo\\Catalogs\\Infrastructure\\Persistence\\User\\GetUserIdFromUsernameQuery'] ?? $container->load('getGetUserIdFromUsernameQueryService'));

        if (isset($container->privates['Akeneo\\Catalogs\\Application\\Handler\\GetProductsHandler'])) {
            return $container->privates['Akeneo\\Catalogs\\Application\\Handler\\GetProductsHandler'];
        }
        $c = ($container->privates['Akeneo\\Catalogs\\Infrastructure\\Persistence\\Catalog\\GetCatalogQuery'] ?? $container->load('getGetCatalogQueryService'));

        if (isset($container->privates['Akeneo\\Catalogs\\Application\\Handler\\GetProductsHandler'])) {
            return $container->privates['Akeneo\\Catalogs\\Application\\Handler\\GetProductsHandler'];
        }
        $d = ($container->privates['Akeneo\\Catalogs\\Infrastructure\\Persistence\\Catalog\\DisableCatalogQuery'] ?? $container->load('getDisableCatalogQueryService'));

        if (isset($container->privates['Akeneo\\Catalogs\\Application\\Handler\\GetProductsHandler'])) {
            return $container->privates['Akeneo\\Catalogs\\Application\\Handler\\GetProductsHandler'];
        }
        $e = ($container->privates['Akeneo\\Catalogs\\Infrastructure\\Validation\\IsCatalogValid'] ?? $container->load('getIsCatalogValidService'));

        if (isset($container->privates['Akeneo\\Catalogs\\Application\\Handler\\GetProductsHandler'])) {
            return $container->privates['Akeneo\\Catalogs\\Application\\Handler\\GetProductsHandler'];
        }
        $f = ($container->privates['Akeneo\\Catalogs\\Infrastructure\\Service\\DispatchInvalidCatalogDisabledEvent'] ?? $container->load('getDispatchInvalidCatalogDisabledEventService'));

        if (isset($container->privates['Akeneo\\Catalogs\\Application\\Handler\\GetProductsHandler'])) {
            return $container->privates['Akeneo\\Catalogs\\Application\\Handler\\GetProductsHandler'];
        }

        return $container->privates['Akeneo\\Catalogs\\Application\\Handler\\GetProductsHandler'] = new \Akeneo\Catalogs\Application\Handler\GetProductsHandler(new \Akeneo\Catalogs\Infrastructure\Persistence\Catalog\Product\GetProductsWithFilteredValuesQuery(($container->privates['Akeneo\\Catalogs\\Infrastructure\\Persistence\\Catalog\\Product\\GetProductUuidsQuery'] ?? $container->load('getGetProductUuidsQueryService')), $a, ($container->privates['Akeneo\\Pim\\Enrichment\\Component\\Product\\Normalizer\\ExternalApi\\ConnectorProductWithUuidNormalizer'] ?? $container->load('getConnectorProductWithUuidNormalizerService')), $b), $c, $d, $e, $f);
    }
}
