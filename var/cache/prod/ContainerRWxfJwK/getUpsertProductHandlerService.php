<?php

namespace ContainerRWxfJwK;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getUpsertProductHandlerService extends KernelProdContainer
{
    /*
     * Gets the private 'Akeneo\Pim\Enrichment\Product\Application\UpsertProductHandler' shared service.
     *
     * @return \Akeneo\Pim\Enrichment\Product\Application\UpsertProductHandler
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Pim/Enrichment/Product/back/Application/UpsertProductHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Pim/Enrichment/Product/back/Application/Applier/UserIntentApplierRegistry.php';

        return $container->privates['Akeneo\\Pim\\Enrichment\\Product\\Application\\UpsertProductHandler'] = new \Akeneo\Pim\Enrichment\Product\Application\UpsertProductHandler(($container->services['.container.private.validator'] ?? $container->load('get_Container_Private_ValidatorService')), ($container->privates['pim_catalog.repository.product'] ?? $container->load('getPimCatalog_Repository_ProductService')), ($container->privates['pim_catalog.builder.product'] ?? $container->load('getPimCatalog_Builder_ProductService')), ($container->privates['pim_catalog.saver.product'] ?? $container->load('getPimCatalog_Saver_ProductService')), ($container->privates['pim_catalog.validator.product'] ?? $container->load('getPimCatalog_Validator_ProductService')), ($container->services['event_dispatcher'] ?? $container->getEventDispatcherService()), new \Akeneo\Pim\Enrichment\Product\Application\Applier\UserIntentApplierRegistry(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Akeneo\\Pim\\Enrichment\\Product\\Application\\Applier\\SetEnabledApplier'] ?? ($container->privates['Akeneo\\Pim\\Enrichment\\Product\\Application\\Applier\\SetEnabledApplier'] = new \Akeneo\Pim\Enrichment\Product\Application\Applier\SetEnabledApplier()));
            yield 1 => ($container->privates['Akeneo\\Pim\\Enrichment\\Product\\Application\\Applier\\SetAssetValueApplier'] ?? $container->load('getSetAssetValueApplierService'));
            yield 2 => ($container->privates['Akeneo\\Pim\\Enrichment\\Product\\Application\\Applier\\AddAssetValueApplier'] ?? $container->load('getAddAssetValueApplierService'));
            yield 3 => ($container->privates['Akeneo\\Pim\\Enrichment\\Product\\Application\\Applier\\RemoveAssetValueApplier'] ?? $container->load('getRemoveAssetValueApplierService'));
            yield 4 => ($container->privates['Akeneo\\Pim\\Enrichment\\Product\\Application\\Applier\\SetSingleValueApplier'] ?? $container->load('getSetSingleValueApplierService'));
            yield 5 => ($container->privates['Akeneo\\Pim\\Enrichment\\Product\\Application\\Applier\\SetMeasurementValueApplier'] ?? $container->load('getSetMeasurementValueApplierService'));
            yield 6 => ($container->privates['Akeneo\\Pim\\Enrichment\\Product\\Application\\Applier\\SetMultipleValuesApplier'] ?? $container->load('getSetMultipleValuesApplierService'));
            yield 7 => ($container->privates['Akeneo\\Pim\\Enrichment\\Product\\Application\\Applier\\ClearValueApplier'] ?? $container->load('getClearValueApplierService'));
            yield 8 => ($container->privates['Akeneo\\Pim\\Enrichment\\Product\\Application\\Applier\\ClearPriceValueApplier'] ?? $container->load('getClearPriceValueApplierService'));
            yield 9 => ($container->privates['Akeneo\\Pim\\Enrichment\\Product\\Application\\Applier\\SetDateValueApplier'] ?? $container->load('getSetDateValueApplierService'));
            yield 10 => ($container->privates['Akeneo\\Pim\\Enrichment\\Product\\Application\\Applier\\AddMultipleValuesApplier'] ?? $container->load('getAddMultipleValuesApplierService'));
            yield 11 => ($container->privates['Akeneo\\Pim\\Enrichment\\Product\\Application\\Applier\\SetFamilyApplier'] ?? $container->load('getSetFamilyApplierService'));
            yield 12 => ($container->privates['Akeneo\\Pim\\Enrichment\\Product\\Application\\Applier\\RemoveFamilyApplier'] ?? $container->load('getRemoveFamilyApplierService'));
            yield 13 => ($container->privates['Akeneo\\Pim\\Enrichment\\Product\\Application\\Applier\\SetCategoriesApplier'] ?? $container->load('getSetCategoriesApplierService'));
            yield 14 => ($container->privates['Akeneo\\Pim\\Enrichment\\Product\\Application\\Applier\\AddCategoriesApplier'] ?? $container->load('getAddCategoriesApplierService'));
            yield 15 => ($container->privates['Akeneo\\Pim\\Enrichment\\Product\\Application\\Applier\\RemoveCategoriesApplier'] ?? $container->load('getRemoveCategoriesApplierService'));
            yield 16 => ($container->privates['Akeneo\\Pim\\Enrichment\\Product\\Application\\Applier\\SetSimpleReferenceEntityValueApplier'] ?? $container->load('getSetSimpleReferenceEntityValueApplierService'));
            yield 17 => ($container->privates['Akeneo\\Pim\\Enrichment\\Product\\Application\\Applier\\SetMultiReferenceEntityValueApplier'] ?? $container->load('getSetMultiReferenceEntityValueApplierService'));
            yield 18 => ($container->privates['Akeneo\\Pim\\Enrichment\\Product\\Application\\Applier\\AddMultiReferenceEntityValueApplier'] ?? $container->load('getAddMultiReferenceEntityValueApplierService'));
            yield 19 => ($container->privates['Akeneo\\Pim\\Enrichment\\Product\\Application\\Applier\\RemoveMultiReferenceEntityValueApplier'] ?? $container->load('getRemoveMultiReferenceEntityValueApplierService'));
            yield 20 => ($container->privates['Akeneo\\Pim\\Enrichment\\Product\\Application\\Applier\\SetTableValueApplier'] ?? $container->load('getSetTableValueApplierService'));
            yield 21 => ($container->privates['Akeneo\\Pim\\Enrichment\\Product\\Application\\Applier\\Groups\\SetGroupsApplier'] ?? $container->load('getSetGroupsApplierService'));
            yield 22 => ($container->privates['Akeneo\\Pim\\Enrichment\\Product\\Application\\Applier\\Groups\\AddToGroupsApplier'] ?? $container->load('getAddToGroupsApplierService'));
            yield 23 => ($container->privates['Akeneo\\Pim\\Enrichment\\Product\\Application\\Applier\\Groups\\RemoveFromGroupsApplier'] ?? $container->load('getRemoveFromGroupsApplierService'));
            yield 24 => ($container->privates['Akeneo\\Pim\\Enrichment\\Product\\Application\\Applier\\ConvertToSimpleProductApplier'] ?? $container->load('getConvertToSimpleProductApplierService'));
            yield 25 => ($container->privates['Akeneo\\Pim\\Enrichment\\Product\\Application\\Applier\\ChangeParentApplier'] ?? $container->load('getChangeParentApplierService'));
            yield 26 => ($container->privates['Akeneo\\Pim\\Enrichment\\Product\\Application\\Applier\\AssociationUserIntentCollectionApplier'] ?? $container->load('getAssociationUserIntentCollectionApplierService'));
            yield 27 => ($container->privates['Akeneo\\Pim\\Enrichment\\Product\\Application\\Applier\\QuantifiedAssociationUserIntentCollectionApplier'] ?? $container->load('getQuantifiedAssociationUserIntentCollectionApplierService'));
            yield 28 => ($container->privates['Akeneo\\Pim\\Enrichment\\Product\\Application\\Applier\\SetPriceCollectionValueApplier'] ?? $container->load('getSetPriceCollectionValueApplierService'));
            yield 29 => ($container->privates['Akeneo\\Pim\\Enrichment\\Product\\Application\\Applier\\SetPriceValueApplier'] ?? $container->load('getSetPriceValueApplierService'));
            yield 30 => ($container->privates['Akeneo\\Pim\\Enrichment\\Product\\Application\\Applier\\SetSimpleReferenceDataValueApplier'] ?? $container->load('getSetSimpleReferenceDataValueApplierService'));
            yield 31 => ($container->privates['Akeneo\\Pim\\Enrichment\\Product\\Application\\Applier\\SetMultiReferenceDataValueApplier'] ?? $container->load('getSetMultiReferenceDataValueApplierService'));
        }, 32)), ($container->services['.container.private.security.token_storage'] ?? $container->get_Container_Private_Security_TokenStorageService()));
    }
}
