<?php

namespace ContainerRWxfJwK;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getPimCatalog_Query_Sorter_RegistryService extends KernelProdContainer
{
    /*
     * Gets the private 'pim_catalog.query.sorter.registry' shared service.
     *
     * @return \Akeneo\Pim\Enrichment\Component\Product\Query\Sorter\SorterRegistry
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Pim/Enrichment/Component/Product/Query/Sorter/SorterRegistryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Pim/Enrichment/Component/Product/Query/Sorter/SorterRegistry.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Pim/Enrichment/Component/Product/Query/Sorter/SorterInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Pim/Enrichment/Component/Product/Query/Sorter/FieldSorterInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Pim/Enrichment/Bundle/Elasticsearch/Sorter/Field/BaseFieldSorter.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Pim/Enrichment/Bundle/Elasticsearch/Sorter/Field/FamilySorter.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Pim/Enrichment/Bundle/Elasticsearch/Sorter/Field/IdSorter.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Pim/Enrichment/Component/Product/Query/Sorter/AttributeSorterInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Pim/Enrichment/Bundle/Elasticsearch/Sorter/IdentifierSorter.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Pim/Enrichment/Bundle/Elasticsearch/Sorter/Field/CompletenessSorter.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Pim/Enrichment/Bundle/Elasticsearch/Sorter/Attribute/AbstractAttributeSorter.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Pim/Enrichment/Bundle/Elasticsearch/Sorter/Attribute/MetricSorter.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Pim/Enrichment/Bundle/Elasticsearch/Sorter/Attribute/BaseAttributeSorter.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Pim/Enrichment/Bundle/Elasticsearch/Sorter/Attribute/TextAreaSorter.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Pim/Enrichment/Bundle/Elasticsearch/Sorter/InGroupSorter.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Pim/Automation/DataQualityInsights/back/Infrastructure/Elasticsearch/Sorter/QualityScoreSorter.php';

        $container->privates['pim_catalog.query.sorter.registry'] = $instance = new \Akeneo\Pim\Enrichment\Component\Product\Query\Sorter\SorterRegistry();

        $a = ($container->privates['pim_catalog.validator.helper.attribute'] ?? $container->load('getPimCatalog_Validator_Helper_AttributeService'));

        $instance->register(new \Akeneo\Pim\Enrichment\Bundle\Elasticsearch\Sorter\Field\BaseFieldSorter([0 => 'updated', 1 => 'created']));
        $instance->register(new \Akeneo\Pim\Enrichment\Bundle\Elasticsearch\Sorter\Field\FamilySorter(($container->privates['pim_catalog.repository.locale'] ?? $container->getPimCatalog_Repository_LocaleService()), [0 => 'family']));
        $instance->register(new \Akeneo\Pim\Enrichment\Bundle\Elasticsearch\Sorter\Field\IdSorter());
        $instance->register(new \Akeneo\Pim\Enrichment\Bundle\Elasticsearch\Sorter\IdentifierSorter([0 => 'identifier'], [0 => 'pim_catalog_identifier']));
        $instance->register(new \Akeneo\Pim\Enrichment\Bundle\Elasticsearch\Sorter\Field\CompletenessSorter([0 => 'completeness']));
        $instance->register(new \Akeneo\Pim\Enrichment\Bundle\Elasticsearch\Sorter\Field\BaseFieldSorter([0 => 'enabled']));
        $instance->register(new \Akeneo\Pim\Enrichment\Bundle\Elasticsearch\Sorter\Field\BaseFieldSorter([0 => 'id']));
        $instance->register(new \Akeneo\Pim\Enrichment\Bundle\Elasticsearch\Sorter\Attribute\MetricSorter($a, [0 => 'pim_catalog_metric']));
        $instance->register(new \Akeneo\Pim\Enrichment\Bundle\Elasticsearch\Sorter\Attribute\BaseAttributeSorter($a, [0 => 'pim_catalog_boolean']));
        $instance->register(new \Akeneo\Pim\Enrichment\Bundle\Elasticsearch\Sorter\Attribute\BaseAttributeSorter($a, [0 => 'pim_catalog_text']));
        $instance->register(new \Akeneo\Pim\Enrichment\Bundle\Elasticsearch\Sorter\Attribute\TextAreaSorter($a, [0 => 'pim_catalog_textarea']));
        $instance->register(new \Akeneo\Pim\Enrichment\Bundle\Elasticsearch\Sorter\Attribute\BaseAttributeSorter($a, [0 => 'pim_catalog_number']));
        $instance->register(new \Akeneo\Pim\Enrichment\Bundle\Elasticsearch\Sorter\Attribute\BaseAttributeSorter($a, [0 => 'pim_catalog_simpleselect']));
        $instance->register(new \Akeneo\Pim\Enrichment\Bundle\Elasticsearch\Sorter\Attribute\BaseAttributeSorter($a, [0 => 'pim_catalog_date']));
        $instance->register(new \Akeneo\Pim\Enrichment\Bundle\Elasticsearch\Sorter\Attribute\BaseAttributeSorter($a, [0 => 'pim_reference_data_simpleselect']));
        $instance->register(new \Akeneo\Pim\Enrichment\Bundle\Elasticsearch\Sorter\InGroupSorter(($container->privates['pim_catalog.repository.group'] ?? $container->load('getPimCatalog_Repository_GroupService'))));
        $instance->register(new \Akeneo\Pim\Automation\DataQualityInsights\Infrastructure\Elasticsearch\Sorter\QualityScoreSorter(($container->privates['Akeneo\\Pim\\Automation\\DataQualityInsights\\Infrastructure\\Elasticsearch\\GetScoresPropertyStrategy'] ?? $container->load('getGetScoresPropertyStrategyService')), [0 => 'quality_score', 1 => 'data_quality_insights_score']));

        return $instance;
    }
}
