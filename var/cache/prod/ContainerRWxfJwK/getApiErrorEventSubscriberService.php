<?php

namespace ContainerRWxfJwK;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getApiErrorEventSubscriberService extends KernelProdContainer
{
    /*
     * Gets the private 'Akeneo\Connectivity\Connection\Infrastructure\ErrorManagement\EventSubscriber\ApiErrorEventSubscriber' shared service.
     *
     * @return \Akeneo\Connectivity\Connection\Infrastructure\ErrorManagement\EventSubscriber\ApiErrorEventSubscriber
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Connectivity/Connection/back/Infrastructure/ErrorManagement/EventSubscriber/ApiErrorEventSubscriber.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Connectivity/Connection/back/Application/ErrorManagement/Service/CollectApiError.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Connectivity/Connection/back/Domain/ErrorManagement/Persistence/Repository/BusinessErrorRepositoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Connectivity/Connection/back/Infrastructure/ErrorManagement/Persistence/ElasticsearchBusinessErrorRepository.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Connectivity/Connection/back/Application/ErrorManagement/Command/UpdateConnectionErrorCountHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Connectivity/Connection/back/Domain/ErrorManagement/Persistence/Repository/ErrorCountRepositoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Connectivity/Connection/back/Infrastructure/ErrorManagement/Persistence/DbalErrorCountRepository.php';
        include_once \dirname(__DIR__, 4).'/vendor/friendsofsymfony/rest-bundle/Serializer/Serializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/friendsofsymfony/rest-bundle/Serializer/SymfonySerializerAdapter.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/SerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/NormalizerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/ContextAwareNormalizerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/DenormalizerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/ContextAwareDenormalizerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Encoder/EncoderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Encoder/ContextAwareEncoderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Encoder/DecoderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Encoder/ContextAwareDecoderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Serializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/CacheableSupportsMethodInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Pim/Enrichment/Component/Error/Normalizer/ProductDomainErrorNormalizer.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Pim/Enrichment/Component/Error/DocumentationBuilderRegistry.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Tool/Component/Api/Normalizer/Exception/ViolationNormalizer.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Pim/Enrichment/Component/Error/Normalizer/ConstraintViolationNormalizer.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Encoder/JsonEncoder.php';

        $a = ($container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\ConnectionContext'] ?? $container->load('getConnectionContextService'));

        if (isset($container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\ErrorManagement\\EventSubscriber\\ApiErrorEventSubscriber'])) {
            return $container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\ErrorManagement\\EventSubscriber\\ApiErrorEventSubscriber'];
        }
        $b = ($container->services['doctrine.dbal.default_connection'] ?? $container->getDoctrine_Dbal_DefaultConnectionService());

        if (isset($container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\ErrorManagement\\EventSubscriber\\ApiErrorEventSubscriber'])) {
            return $container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\ErrorManagement\\EventSubscriber\\ApiErrorEventSubscriber'];
        }
        $c = new \Akeneo\Pim\Enrichment\Component\Error\DocumentationBuilderRegistry(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Akeneo\\Pim\\Enrichment\\Component\\Error\\DocumentationBuilder\\AttributeOptionValidation'] ?? ($container->privates['Akeneo\\Pim\\Enrichment\\Component\\Error\\DocumentationBuilder\\AttributeOptionValidation'] = new \Akeneo\Pim\Enrichment\Component\Error\DocumentationBuilder\AttributeOptionValidation()));
            yield 1 => ($container->privates['Akeneo\\Pim\\Enrichment\\Component\\Error\\DocumentationBuilder\\DefaultAttributeValidation'] ?? ($container->privates['Akeneo\\Pim\\Enrichment\\Component\\Error\\DocumentationBuilder\\DefaultAttributeValidation'] = new \Akeneo\Pim\Enrichment\Component\Error\DocumentationBuilder\DefaultAttributeValidation()));
            yield 2 => ($container->privates['Akeneo\\Pim\\Enrichment\\Component\\Error\\DocumentationBuilder\\UniqueProductIdentifier'] ?? ($container->privates['Akeneo\\Pim\\Enrichment\\Component\\Error\\DocumentationBuilder\\UniqueProductIdentifier'] = new \Akeneo\Pim\Enrichment\Component\Error\DocumentationBuilder\UniqueProductIdentifier()));
            yield 3 => ($container->privates['Akeneo\\Pim\\Enrichment\\Component\\Error\\DocumentationBuilder\\UnknownAttribute'] ?? ($container->privates['Akeneo\\Pim\\Enrichment\\Component\\Error\\DocumentationBuilder\\UnknownAttribute'] = new \Akeneo\Pim\Enrichment\Component\Error\DocumentationBuilder\UnknownAttribute()));
            yield 4 => ($container->privates['Akeneo\\Pim\\Enrichment\\Component\\Error\\DocumentationBuilder\\UnknownCategory'] ?? ($container->privates['Akeneo\\Pim\\Enrichment\\Component\\Error\\DocumentationBuilder\\UnknownCategory'] = new \Akeneo\Pim\Enrichment\Component\Error\DocumentationBuilder\UnknownCategory()));
            yield 5 => ($container->privates['Akeneo\\Pim\\Enrichment\\Component\\Error\\DocumentationBuilder\\UnknownChannel'] ?? ($container->privates['Akeneo\\Pim\\Enrichment\\Component\\Error\\DocumentationBuilder\\UnknownChannel'] = new \Akeneo\Pim\Enrichment\Component\Error\DocumentationBuilder\UnknownChannel()));
            yield 6 => ($container->privates['Akeneo\\Pim\\Enrichment\\Component\\Error\\DocumentationBuilder\\UnknownCurrency'] ?? ($container->privates['Akeneo\\Pim\\Enrichment\\Component\\Error\\DocumentationBuilder\\UnknownCurrency'] = new \Akeneo\Pim\Enrichment\Component\Error\DocumentationBuilder\UnknownCurrency()));
            yield 7 => ($container->privates['Akeneo\\Pim\\Enrichment\\Component\\Error\\DocumentationBuilder\\UnknownFamily'] ?? ($container->privates['Akeneo\\Pim\\Enrichment\\Component\\Error\\DocumentationBuilder\\UnknownFamily'] = new \Akeneo\Pim\Enrichment\Component\Error\DocumentationBuilder\UnknownFamily()));
            yield 8 => ($container->privates['Akeneo\\Pim\\Enrichment\\Component\\Error\\DocumentationBuilder\\LocalizableAttribute'] ?? ($container->privates['Akeneo\\Pim\\Enrichment\\Component\\Error\\DocumentationBuilder\\LocalizableAttribute'] = new \Akeneo\Pim\Enrichment\Component\Error\DocumentationBuilder\LocalizableAttribute()));
            yield 9 => ($container->privates['Akeneo\\Pim\\Enrichment\\Component\\Error\\DocumentationBuilder\\LocalizableScopableAttribute'] ?? ($container->privates['Akeneo\\Pim\\Enrichment\\Component\\Error\\DocumentationBuilder\\LocalizableScopableAttribute'] = new \Akeneo\Pim\Enrichment\Component\Error\DocumentationBuilder\LocalizableScopableAttribute()));
            yield 10 => ($container->privates['Akeneo\\Pim\\Enrichment\\Component\\Error\\DocumentationBuilder\\NotEmptyFamily'] ?? ($container->privates['Akeneo\\Pim\\Enrichment\\Component\\Error\\DocumentationBuilder\\NotEmptyFamily'] = new \Akeneo\Pim\Enrichment\Component\Error\DocumentationBuilder\NotEmptyFamily()));
            yield 11 => ($container->privates['Akeneo\\Pim\\Enrichment\\Component\\Error\\DocumentationBuilder\\InvalidAssociationProductIdentifier'] ?? ($container->privates['Akeneo\\Pim\\Enrichment\\Component\\Error\\DocumentationBuilder\\InvalidAssociationProductIdentifier'] = new \Akeneo\Pim\Enrichment\Component\Error\DocumentationBuilder\InvalidAssociationProductIdentifier()));
        }, 12));

        return $container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\ErrorManagement\\EventSubscriber\\ApiErrorEventSubscriber'] = new \Akeneo\Connectivity\Connection\Infrastructure\ErrorManagement\EventSubscriber\ApiErrorEventSubscriber(new \Akeneo\Connectivity\Connection\Application\ErrorManagement\Service\CollectApiError($a, new \Akeneo\Connectivity\Connection\Infrastructure\ErrorManagement\Persistence\ElasticsearchBusinessErrorRepository(($container->services['akeneo_connectivity.client.connection_error'] ?? $container->load('getAkeneoConnectivity_Client_ConnectionErrorService'))), new \Akeneo\Connectivity\Connection\Application\ErrorManagement\Command\UpdateConnectionErrorCountHandler(new \Akeneo\Connectivity\Connection\Infrastructure\ErrorManagement\Persistence\DbalErrorCountRepository($b)), new \FOS\RestBundle\Serializer\SymfonySerializerAdapter(new \Symfony\Component\Serializer\Serializer([0 => new \Akeneo\Pim\Enrichment\Component\Error\Normalizer\ProductDomainErrorNormalizer($c), 1 => new \Akeneo\Pim\Enrichment\Component\Error\Normalizer\ConstraintViolationNormalizer(($container->privates['pim_catalog.repository.cached_attribute'] ?? $container->load('getPimCatalog_Repository_CachedAttributeService')), $c)], [0 => ($container->privates['serializer.encoder.json'] ?? ($container->privates['serializer.encoder.json'] = new \Symfony\Component\Serializer\Encoder\JsonEncoder()))]))));
    }
}
