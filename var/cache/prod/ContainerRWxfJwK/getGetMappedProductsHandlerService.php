<?php

namespace ContainerRWxfJwK;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getGetMappedProductsHandlerService extends KernelProdContainer
{
    /*
     * Gets the private 'Akeneo\Catalogs\Application\Handler\GetMappedProductsHandler' shared autowired service.
     *
     * @return \Akeneo\Catalogs\Application\Handler\GetMappedProductsHandler
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/components/catalogs/back/src/Application/Handler/GetMappedProductsHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/components/catalogs/back/src/Application/Persistence/Catalog/Product/GetRawProductsQueryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/components/catalogs/back/src/Infrastructure/Persistence/Catalog/Product/GetRawProductsQuery.php';

        $a = ($container->privates['Akeneo\\Catalogs\\Infrastructure\\Persistence\\Catalog\\GetCatalogQuery'] ?? $container->load('getGetCatalogQueryService'));

        if (isset($container->privates['Akeneo\\Catalogs\\Application\\Handler\\GetMappedProductsHandler'])) {
            return $container->privates['Akeneo\\Catalogs\\Application\\Handler\\GetMappedProductsHandler'];
        }
        $b = ($container->privates['Akeneo\\Catalogs\\Infrastructure\\Persistence\\Catalog\\Product\\GetProductUuidsQuery'] ?? $container->load('getGetProductUuidsQueryService'));

        if (isset($container->privates['Akeneo\\Catalogs\\Application\\Handler\\GetMappedProductsHandler'])) {
            return $container->privates['Akeneo\\Catalogs\\Application\\Handler\\GetMappedProductsHandler'];
        }
        $c = ($container->privates['Akeneo\\Pim\\Enrichment\\Bundle\\Storage\\Sql\\Product\\GetValuesAndPropertiesFromProductUuids'] ?? $container->load('getGetValuesAndPropertiesFromProductUuidsService'));

        if (isset($container->privates['Akeneo\\Catalogs\\Application\\Handler\\GetMappedProductsHandler'])) {
            return $container->privates['Akeneo\\Catalogs\\Application\\Handler\\GetMappedProductsHandler'];
        }

        return $container->privates['Akeneo\\Catalogs\\Application\\Handler\\GetMappedProductsHandler'] = new \Akeneo\Catalogs\Application\Handler\GetMappedProductsHandler($a, ($container->privates['Akeneo\\Catalogs\\Infrastructure\\Storage\\CatalogsMappingStorage'] ?? $container->load('getCatalogsMappingStorageService')), new \Akeneo\Catalogs\Infrastructure\Persistence\Catalog\Product\GetRawProductsQuery($b, $c));
    }
}
