<?php

namespace ContainerRWxfJwK;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getPurgeEventsApiLogsCommandService extends KernelProdContainer
{
    /*
     * Gets the private 'Akeneo\Connectivity\Connection\Infrastructure\Webhook\EventsApiDebug\Command\PurgeEventsApiLogsCommand' shared service.
     *
     * @return \Akeneo\Connectivity\Connection\Infrastructure\Webhook\EventsApiDebug\Command\PurgeEventsApiLogsCommand
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Connectivity/Connection/back/Infrastructure/Webhook/EventsApiDebug/Command/PurgeEventsApiLogsCommand.php';

        $container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Webhook\\EventsApiDebug\\Command\\PurgeEventsApiLogsCommand'] = $instance = new \Akeneo\Connectivity\Connection\Infrastructure\Webhook\EventsApiDebug\Command\PurgeEventsApiLogsCommand(($container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Webhook\\EventsApiDebug\\Persistence\\PurgeEventsApiSuccessLogsQuery'] ?? $container->load('getPurgeEventsApiSuccessLogsQueryService')), ($container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Webhook\\EventsApiDebug\\Persistence\\PurgeEventsApiErrorLogsQuery'] ?? $container->load('getPurgeEventsApiErrorLogsQueryService')), ($container->privates['monolog.logger'] ?? $container->load('getMonolog_LoggerService')));

        $instance->setName('akeneo:connectivity-connection:purge-events-api-logs');

        return $instance;
    }
}
