<?php

namespace ContainerRWxfJwK;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getAkeneoStorageUtils_EventSubscriber_ResolveTargetRepositoryService extends KernelProdContainer
{
    /*
     * Gets the private 'akeneo_storage_utils.event_subscriber.resolve_target_repository' shared service.
     *
     * @return \Akeneo\Tool\Bundle\StorageUtilsBundle\EventSubscriber\ResolveTargetRepositorySubscriber
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Tool/Bundle/StorageUtilsBundle/EventSubscriber/ResolveTargetRepositorySubscriber.php';

        $container->privates['akeneo_storage_utils.event_subscriber.resolve_target_repository'] = $instance = new \Akeneo\Tool\Bundle\StorageUtilsBundle\EventSubscriber\ResolveTargetRepositorySubscriber();

        $instance->addResolveTargetRepository('Akeneo\\Tool\\Component\\FileStorage\\Model\\FileInfo', 'Akeneo\\Tool\\Bundle\\FileStorageBundle\\Doctrine\\ORM\\Repository\\FileInfoRepository');
        $instance->addResolveTargetRepository('Akeneo\\Channel\\Infrastructure\\Component\\Model\\Locale', 'Akeneo\\Channel\\Infrastructure\\Doctrine\\Repository\\LocaleRepository');
        $instance->addResolveTargetRepository('Akeneo\\Tool\\Component\\Batch\\Model\\JobInstance', 'Akeneo\\Tool\\Bundle\\BatchBundle\\Job\\JobInstanceRepository');
        $instance->addResolveTargetRepository('Akeneo\\UserManagement\\Component\\Model\\Role', 'Akeneo\\UserManagement\\Bundle\\Doctrine\\ORM\\Repository\\RoleRepository');
        $instance->addResolveTargetRepository('Akeneo\\UserManagement\\Component\\Model\\Group', 'Akeneo\\UserManagement\\Bundle\\Doctrine\\ORM\\Repository\\GroupRepository');
        $instance->addResolveTargetRepository('Akeneo\\UserManagement\\Component\\Model\\User', 'Akeneo\\UserManagement\\Bundle\\Doctrine\\ORM\\Repository\\UserRepository');
        $instance->addResolveTargetRepository('Akeneo\\Channel\\Infrastructure\\Component\\Model\\Channel', 'Akeneo\\Channel\\Infrastructure\\Doctrine\\Repository\\ChannelRepository');
        $instance->addResolveTargetRepository('Akeneo\\Channel\\Infrastructure\\Component\\Model\\Currency', 'Akeneo\\Channel\\Infrastructure\\Doctrine\\Repository\\CurrencyRepository');
        $instance->addResolveTargetRepository('Akeneo\\Pim\\Enrichment\\Component\\Product\\Model\\Group', 'Akeneo\\Pim\\Enrichment\\Bundle\\Doctrine\\ORM\\Repository\\GroupRepository');
        $instance->addResolveTargetRepository('Akeneo\\Pim\\Enrichment\\Component\\Product\\Model\\ProductUniqueData', 'Akeneo\\Pim\\Enrichment\\Bundle\\Doctrine\\ORM\\Repository\\ProductUniqueDataRepository');
        $instance->addResolveTargetRepository('Akeneo\\Pim\\Enrichment\\Component\\Product\\Model\\ProductModel', 'Akeneo\\Pim\\Enrichment\\Bundle\\Doctrine\\ORM\\Repository\\ProductModelRepository');
        $instance->addResolveTargetRepository('Akeneo\\Pim\\Enrichment\\Component\\Product\\Model\\Product', 'Akeneo\\Pim\\Enrichment\\Bundle\\Doctrine\\ORM\\Repository\\ProductRepository');
        $instance->addResolveTargetRepository('Akeneo\\Pim\\Enrichment\\Component\\Product\\Model\\ProductAssociation', 'Akeneo\\Pim\\Enrichment\\Bundle\\Doctrine\\ORM\\Repository\\AssociationRepository');
        $instance->addResolveTargetRepository('Akeneo\\Pim\\Enrichment\\Component\\Comment\\Model\\Comment', 'Akeneo\\Pim\\Enrichment\\Bundle\\Doctrine\\ORM\\Repository\\CommentRepository');
        $instance->addResolveTargetRepository('Akeneo\\Pim\\Structure\\Component\\Model\\AssociationType', 'Akeneo\\Pim\\Structure\\Bundle\\Doctrine\\ORM\\Repository\\AssociationTypeRepository');
        $instance->addResolveTargetRepository('Akeneo\\Pim\\Structure\\Component\\Model\\AttributeGroup', 'Akeneo\\Pim\\Structure\\Bundle\\Doctrine\\ORM\\Repository\\AttributeGroupRepository');
        $instance->addResolveTargetRepository('Akeneo\\Pim\\Structure\\Component\\Model\\Attribute', 'Akeneo\\Pim\\Structure\\Bundle\\Doctrine\\ORM\\Repository\\AttributeRepository');
        $instance->addResolveTargetRepository('Akeneo\\Pim\\Structure\\Component\\Model\\Family', 'Akeneo\\Pim\\Structure\\Bundle\\Doctrine\\ORM\\Repository\\FamilyRepository');
        $instance->addResolveTargetRepository('Akeneo\\Pim\\Structure\\Component\\Model\\FamilyVariant', 'Akeneo\\Pim\\Structure\\Bundle\\Doctrine\\ORM\\Repository\\FamilyVariantRepository');
        $instance->addResolveTargetRepository('Akeneo\\Pim\\Structure\\Component\\Model\\AttributeRequirement', 'Akeneo\\Pim\\Structure\\Bundle\\Doctrine\\ORM\\Repository\\AttributeRequirementRepository');
        $instance->addResolveTargetRepository('Akeneo\\Pim\\Structure\\Component\\Model\\AttributeOption', 'Akeneo\\Pim\\Structure\\Bundle\\Doctrine\\ORM\\Repository\\AttributeOptionRepository');
        $instance->addResolveTargetRepository('Akeneo\\Pim\\Structure\\Component\\Model\\GroupType', 'Akeneo\\Pim\\Structure\\Bundle\\Doctrine\\ORM\\Repository\\GroupTypeRepository');
        $instance->addResolveTargetRepository('Oro\\Bundle\\PimDataGridBundle\\Entity\\DatagridView', 'Oro\\Bundle\\PimDataGridBundle\\Repository\\DatagridViewRepository');
        $instance->addResolveTargetRepository('Akeneo\\Platform\\Bundle\\NotificationBundle\\Entity\\UserNotification', 'Akeneo\\Platform\\Bundle\\NotificationBundle\\Entity\\Repository\\UserNotificationRepository');
        $instance->addResolveTargetRepository('Akeneo\\Tool\\Component\\Versioning\\Model\\Version', 'Akeneo\\Tool\\Bundle\\VersioningBundle\\Doctrine\\ORM\\VersionRepository');
        $instance->addResolveTargetRepository('Akeneo\\Category\\Infrastructure\\Component\\Model\\Category', 'Akeneo\\Category\\Infrastructure\\Doctrine\\ORM\\Repository\\CategoryRepository');

        return $instance;
    }
}
