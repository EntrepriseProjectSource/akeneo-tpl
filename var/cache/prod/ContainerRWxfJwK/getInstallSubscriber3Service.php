<?php

namespace ContainerRWxfJwK;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getInstallSubscriber3Service extends KernelProdContainer
{
    /*
     * Gets the private 'Akeneo\Connectivity\Connection\Infrastructure\Connections\Install\InstallSubscriber' shared service.
     *
     * @return \Akeneo\Connectivity\Connection\Infrastructure\Connections\Install\InstallSubscriber
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Connectivity/Connection/back/Infrastructure/Connections/Install/InstallSubscriber.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Connectivity/Connection/back/Infrastructure/Connections/Install/FixturesLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Tool/Component/StorageUtils/Factory/SimpleFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Tool/Component/StorageUtils/Factory/SimpleFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Tool/Component/StorageUtils/Updater/ObjectUpdaterInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/UserManagement/Component/Updater/RoleUpdater.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/UserManagement/Component/Updater/GroupUpdater.php';

        $a = ($container->services['doctrine.dbal.default_connection'] ?? $container->getDoctrine_Dbal_DefaultConnectionService());

        if (isset($container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Connections\\Install\\InstallSubscriber'])) {
            return $container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Connections\\Install\\InstallSubscriber'];
        }
        $b = ($container->privates['akeneo_file_storage.file_storage.file.file_storer'] ?? $container->load('getAkeneoFileStorage_FileStorage_File_FileStorerService'));

        if (isset($container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Connections\\Install\\InstallSubscriber'])) {
            return $container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Connections\\Install\\InstallSubscriber'];
        }
        $c = ($container->services['.container.private.validator'] ?? $container->load('get_Container_Private_ValidatorService'));

        if (isset($container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Connections\\Install\\InstallSubscriber'])) {
            return $container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Connections\\Install\\InstallSubscriber'];
        }
        $d = ($container->privates['pim_user.updater.user'] ?? $container->load('getPimUser_Updater_UserService'));

        if (isset($container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Connections\\Install\\InstallSubscriber'])) {
            return $container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Connections\\Install\\InstallSubscriber'];
        }
        $e = ($container->privates['pim_user.saver.user'] ?? $container->load('getPimUser_Saver_UserService'));

        if (isset($container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Connections\\Install\\InstallSubscriber'])) {
            return $container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Connections\\Install\\InstallSubscriber'];
        }
        $f = ($container->privates['pim_user.saver.role'] ?? $container->load('getPimUser_Saver_RoleService'));

        if (isset($container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Connections\\Install\\InstallSubscriber'])) {
            return $container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Connections\\Install\\InstallSubscriber'];
        }
        $g = ($container->privates['pim_user.saver.group'] ?? $container->load('getPimUser_Saver_GroupService'));

        if (isset($container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Connections\\Install\\InstallSubscriber'])) {
            return $container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Connections\\Install\\InstallSubscriber'];
        }

        return $container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Connections\\Install\\InstallSubscriber'] = new \Akeneo\Connectivity\Connection\Infrastructure\Connections\Install\InstallSubscriber($a, new \Akeneo\Connectivity\Connection\Infrastructure\Connections\Install\FixturesLoader($a, $b, $c, ($container->privates['pim_user.factory.user'] ?? $container->load('getPimUser_Factory_UserService')), $d, $e, ($container->privates['pim_user.factory.role'] ?? ($container->privates['pim_user.factory.role'] = new \Akeneo\Tool\Component\StorageUtils\Factory\SimpleFactory('Akeneo\\UserManagement\\Component\\Model\\Role'))), ($container->privates['pim_user.updater.role'] ?? ($container->privates['pim_user.updater.role'] = new \Akeneo\UserManagement\Component\Updater\RoleUpdater())), $f, ($container->privates['pim_user.factory.group'] ?? ($container->privates['pim_user.factory.group'] = new \Akeneo\Tool\Component\StorageUtils\Factory\SimpleFactory('Akeneo\\UserManagement\\Component\\Model\\Group'))), ($container->privates['pim_user.updater.group'] ?? ($container->privates['pim_user.updater.group'] = new \Akeneo\UserManagement\Component\Updater\GroupUpdater())), $g));
    }
}
