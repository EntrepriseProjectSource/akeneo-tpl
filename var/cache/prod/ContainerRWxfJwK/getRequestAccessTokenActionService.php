<?php

namespace ContainerRWxfJwK;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getRequestAccessTokenActionService extends KernelProdContainer
{
    /*
     * Gets the public 'Akeneo\Connectivity\Connection\Infrastructure\Apps\Controller\Public\RequestAccessTokenAction' shared service.
     *
     * @return \Akeneo\Connectivity\Connection\Infrastructure\Apps\Controller\Public\RequestAccessTokenAction
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Connectivity/Connection/back/Infrastructure/Apps/Controller/Public/RequestAccessTokenAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Connectivity/Connection/back/Application/Apps/Service/CreateAccessTokenInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Connectivity/Connection/back/Infrastructure/Apps/OAuth/CreateAccessToken.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Connectivity/Connection/back/Infrastructure/Apps/OAuth/CreateJsonWebToken.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Connectivity/Connection/back/Domain/Apps/Persistence/GetUserConsentedAuthenticationUuidQueryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Connectivity/Connection/back/Infrastructure/Apps/Persistence/GetUserConsentedAuthenticationUuidQuery.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Connectivity/Connection/back/Domain/Apps/Persistence/GetAccessTokenQueryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Connectivity/Connection/back/Infrastructure/Apps/Persistence/GetAccessTokenQuery.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Connectivity/Connection/back/Domain/Apps/Persistence/DeleteAccessTokensQueryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Connectivity/Connection/back/Infrastructure/Apps/Persistence/DeleteAccessTokensQuery.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Connectivity/Connection/back/Application/RandomCodeGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Connectivity/Connection/back/Infrastructure/Service/RandomCodeGenerator.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Connectivity/Connection/back/Domain/ClockInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Connectivity/Connection/back/Infrastructure/Service/Clock/SystemClock.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Platform/Bundle/FrameworkBundle/Service/PimUrl.php';

        $a = ($container->services['doctrine.dbal.default_connection'] ?? $container->getDoctrine_Dbal_DefaultConnectionService());

        return $container->services['Akeneo\\Connectivity\\Connection\\Infrastructure\\Apps\\Controller\\Public\\RequestAccessTokenAction'] = new \Akeneo\Connectivity\Connection\Infrastructure\Apps\Controller\Public\RequestAccessTokenAction(($container->services['akeneo_connectivity.connection.marketplace_activate.feature'] ?? ($container->services['akeneo_connectivity.connection.marketplace_activate.feature'] = new \Akeneo\Platform\Bundle\FeatureFlagBundle\Configuration\EnvVarFeatureFlag($container->getEnv('bool:FLAG_MARKETPLACE_ACTIVATE_ENABLED')))), ($container->services['.container.private.validator'] ?? $container->load('get_Container_Private_ValidatorService')), new \Akeneo\Connectivity\Connection\Infrastructure\Apps\OAuth\CreateAccessToken(($container->privates['fos_oauth_server.storage.default'] ?? $container->load('getFosOauthServer_Storage_DefaultService')), ($container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Apps\\OAuth\\ClientProvider'] ?? $container->load('getClientProviderService')), ($container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Service\\RandomCodeGenerator'] ?? ($container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Service\\RandomCodeGenerator'] = new \Akeneo\Connectivity\Connection\Infrastructure\Service\RandomCodeGenerator())), ($container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Apps\\Persistence\\GetAppConfirmationQuery'] ?? $container->load('getGetAppConfirmationQueryService')), ($container->privates['pim_user.repository.user'] ?? $container->load('getPimUser_Repository_UserService')), new \Akeneo\Connectivity\Connection\Infrastructure\Apps\OAuth\CreateJsonWebToken(($container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Service\\Clock\\SystemClock'] ?? ($container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Service\\Clock\\SystemClock'] = new \Akeneo\Connectivity\Connection\Infrastructure\Service\Clock\SystemClock())), ($container->services['pim_framework.service.pim_url'] ?? ($container->services['pim_framework.service.pim_url'] = new \Akeneo\Platform\Bundle\FrameworkBundle\Service\PimUrl($container->getEnv('string:AKENEO_PIM_URL')))), ($container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Apps\\Persistence\\GetAsymmetricKeysQuery'] ?? $container->load('getGetAsymmetricKeysQueryService'))), ($container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Apps\\Persistence\\GetConnectedAppScopesQuery'] ?? $container->load('getGetConnectedAppScopesQueryService')), new \Akeneo\Connectivity\Connection\Infrastructure\Apps\Persistence\GetUserConsentedAuthenticationUuidQuery($a), ($container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Apps\\Persistence\\GetUserConsentedAuthenticationScopesQuery'] ?? $container->load('getGetUserConsentedAuthenticationScopesQueryService')), new \Akeneo\Connectivity\Connection\Infrastructure\Apps\Persistence\GetAccessTokenQuery($a), new \Akeneo\Connectivity\Connection\Infrastructure\Apps\Persistence\DeleteAccessTokensQuery($a)));
    }
}
