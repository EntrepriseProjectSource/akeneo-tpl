<?php

namespace ContainerRWxfJwK;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getDispatchProductModelCreatedAndUpdatedEventSubscriberService extends KernelProdContainer
{
    /*
     * Gets the private 'Akeneo\Pim\Enrichment\Bundle\EventSubscriber\BusinessEvent\DispatchProductModelCreatedAndUpdatedEventSubscriber' shared service.
     *
     * @return \Akeneo\Pim\Enrichment\Bundle\EventSubscriber\BusinessEvent\DispatchProductModelCreatedAndUpdatedEventSubscriber
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Pim/Enrichment/Bundle/EventSubscriber/BusinessEvent/DispatchBufferedPimEventSubscriberInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Pim/Enrichment/Bundle/EventSubscriber/BusinessEvent/DispatchProductModelCreatedAndUpdatedEventSubscriber.php';

        $a = ($container->services['messenger.default_bus'] ?? $container->load('getMessenger_DefaultBusService'));

        if (isset($container->privates['Akeneo\\Pim\\Enrichment\\Bundle\\EventSubscriber\\BusinessEvent\\DispatchProductModelCreatedAndUpdatedEventSubscriber'])) {
            return $container->privates['Akeneo\\Pim\\Enrichment\\Bundle\\EventSubscriber\\BusinessEvent\\DispatchProductModelCreatedAndUpdatedEventSubscriber'];
        }

        return $container->privates['Akeneo\\Pim\\Enrichment\\Bundle\\EventSubscriber\\BusinessEvent\\DispatchProductModelCreatedAndUpdatedEventSubscriber'] = new \Akeneo\Pim\Enrichment\Bundle\EventSubscriber\BusinessEvent\DispatchProductModelCreatedAndUpdatedEventSubscriber(($container->privates['security.helper'] ?? $container->load('getSecurity_HelperService')), $a, 10, ($container->privates['monolog.logger'] ?? $container->load('getMonolog_LoggerService')), ($container->services['monolog.logger.business_event'] ?? $container->load('getMonolog_Logger_BusinessEventService')));
    }
}
