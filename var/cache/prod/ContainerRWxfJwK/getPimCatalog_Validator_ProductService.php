<?php

namespace ContainerRWxfJwK;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getPimCatalog_Validator_ProductService extends KernelProdContainer
{
    /*
     * Gets the private 'pim_catalog.validator.product' shared service.
     *
     * @return \Symfony\Component\Validator\Validator\RecursiveValidator
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/Mapping/Factory/MetadataFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/Validator/ValidatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/Validator/RecursiveValidator.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/Context/ExecutionContextFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/Context/ExecutionContextFactory.php';

        $a = ($container->privates['pim_catalog.validator.mapping.delegating_class_metadata_factory'] ?? $container->load('getPimCatalog_Validator_Mapping_DelegatingClassMetadataFactoryService'));

        if (isset($container->privates['pim_catalog.validator.product'])) {
            return $container->privates['pim_catalog.validator.product'];
        }
        $b = ($container->privates['validator.validator_factory'] ?? $container->load('getValidator_ValidatorFactoryService'));

        if (isset($container->privates['pim_catalog.validator.product'])) {
            return $container->privates['pim_catalog.validator.product'];
        }

        return $container->privates['pim_catalog.validator.product'] = new \Symfony\Component\Validator\Validator\RecursiveValidator(new \Symfony\Component\Validator\Context\ExecutionContextFactory(($container->privates['translator.default'] ?? $container->getTranslator_DefaultService()), 'validators'), $a, $b, []);
    }
}
