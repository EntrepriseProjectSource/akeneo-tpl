<?php

namespace ContainerRWxfJwK;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getGetProductHandlerService extends KernelProdContainer
{
    /*
     * Gets the private 'Akeneo\Catalogs\Application\Handler\GetProductHandler' shared autowired service.
     *
     * @return \Akeneo\Catalogs\Application\Handler\GetProductHandler
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/components/catalogs/back/src/Application/Handler/GetProductHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/components/catalogs/back/src/Application/Persistence/Catalog/Product/IsProductBelongingToCatalogQueryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/components/catalogs/back/src/Infrastructure/Persistence/Catalog/Product/IsProductBelongingToCatalogQuery.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/components/catalogs/back/src/Application/Persistence/Catalog/Product/GetProductQueryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/components/catalogs/back/src/Infrastructure/Persistence/Catalog/Product/GetProductQuery.php';

        $a = ($container->privates['Akeneo\\Catalogs\\Infrastructure\\Persistence\\Catalog\\GetCatalogQuery'] ?? $container->load('getGetCatalogQueryService'));

        if (isset($container->privates['Akeneo\\Catalogs\\Application\\Handler\\GetProductHandler'])) {
            return $container->privates['Akeneo\\Catalogs\\Application\\Handler\\GetProductHandler'];
        }
        $b = ($container->privates['Akeneo\\Catalogs\\Infrastructure\\Persistence\\User\\GetUserIdFromUsernameQuery'] ?? $container->load('getGetUserIdFromUsernameQueryService'));

        if (isset($container->privates['Akeneo\\Catalogs\\Application\\Handler\\GetProductHandler'])) {
            return $container->privates['Akeneo\\Catalogs\\Application\\Handler\\GetProductHandler'];
        }
        $c = ($container->privates['akeneo.pim.enrichment.product.connector.get_product_from_uuids'] ?? $container->load('getAkeneo_Pim_Enrichment_Product_Connector_GetProductFromUuidsService'));

        if (isset($container->privates['Akeneo\\Catalogs\\Application\\Handler\\GetProductHandler'])) {
            return $container->privates['Akeneo\\Catalogs\\Application\\Handler\\GetProductHandler'];
        }
        $d = ($container->privates['Akeneo\\Pim\\Enrichment\\Component\\Product\\Normalizer\\ExternalApi\\ConnectorProductWithUuidNormalizer'] ?? $container->load('getConnectorProductWithUuidNormalizerService'));

        if (isset($container->privates['Akeneo\\Catalogs\\Application\\Handler\\GetProductHandler'])) {
            return $container->privates['Akeneo\\Catalogs\\Application\\Handler\\GetProductHandler'];
        }

        return $container->privates['Akeneo\\Catalogs\\Application\\Handler\\GetProductHandler'] = new \Akeneo\Catalogs\Application\Handler\GetProductHandler($a, new \Akeneo\Catalogs\Infrastructure\Persistence\Catalog\Product\IsProductBelongingToCatalogQuery(($container->privates['Akeneo\\Pim\\Enrichment\\Component\\Product\\Query\\ProductQueryBuilderFactoryInterface'] ?? $container->load('getProductQueryBuilderFactoryInterfaceService'))), new \Akeneo\Catalogs\Infrastructure\Persistence\Catalog\Product\GetProductQuery($b, $c, $d));
    }
}
