<?php

namespace ContainerRWxfJwK;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getSetIdentifiersSubscriberService extends KernelProdContainer
{
    /*
     * Gets the private 'Akeneo\Pim\Automation\IdentifierGenerator\Infrastructure\Subscriber\SetIdentifiersSubscriber' shared service.
     *
     * @return \Akeneo\Pim\Automation\IdentifierGenerator\Infrastructure\Subscriber\SetIdentifiersSubscriber
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/components/identifier-generator/back/src/Infrastructure/Subscriber/SetIdentifiersSubscriber.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/components/identifier-generator/back/src/Application/Generate/GenerateIdentifierHandler.php';

        $a = ($container->privates['Akeneo\\Pim\\Automation\\IdentifierGenerator\\Domain\\Repository\\IdentifierGeneratorRepository'] ?? $container->load('getIdentifierGeneratorRepositoryService'));

        if (isset($container->privates['Akeneo\\Pim\\Automation\\IdentifierGenerator\\Infrastructure\\Subscriber\\SetIdentifiersSubscriber'])) {
            return $container->privates['Akeneo\\Pim\\Automation\\IdentifierGenerator\\Infrastructure\\Subscriber\\SetIdentifiersSubscriber'];
        }
        $b = ($container->services['.container.private.validator'] ?? $container->load('get_Container_Private_ValidatorService'));

        if (isset($container->privates['Akeneo\\Pim\\Automation\\IdentifierGenerator\\Infrastructure\\Subscriber\\SetIdentifiersSubscriber'])) {
            return $container->privates['Akeneo\\Pim\\Automation\\IdentifierGenerator\\Infrastructure\\Subscriber\\SetIdentifiersSubscriber'];
        }
        $c = ($container->privates['pim_catalog.validator.mapping.delegating_class_metadata_factory'] ?? $container->load('getPimCatalog_Validator_Mapping_DelegatingClassMetadataFactoryService'));

        if (isset($container->privates['Akeneo\\Pim\\Automation\\IdentifierGenerator\\Infrastructure\\Subscriber\\SetIdentifiersSubscriber'])) {
            return $container->privates['Akeneo\\Pim\\Automation\\IdentifierGenerator\\Infrastructure\\Subscriber\\SetIdentifiersSubscriber'];
        }
        $d = ($container->services['event_dispatcher'] ?? $container->getEventDispatcherService());

        if (isset($container->privates['Akeneo\\Pim\\Automation\\IdentifierGenerator\\Infrastructure\\Subscriber\\SetIdentifiersSubscriber'])) {
            return $container->privates['Akeneo\\Pim\\Automation\\IdentifierGenerator\\Infrastructure\\Subscriber\\SetIdentifiersSubscriber'];
        }

        return $container->privates['Akeneo\\Pim\\Automation\\IdentifierGenerator\\Infrastructure\\Subscriber\\SetIdentifiersSubscriber'] = new \Akeneo\Pim\Automation\IdentifierGenerator\Infrastructure\Subscriber\SetIdentifiersSubscriber($a, new \Akeneo\Pim\Automation\IdentifierGenerator\Application\Generate\GenerateIdentifierHandler(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Akeneo\\Pim\\Automation\\IdentifierGenerator\\Application\\Generate\\Property\\GenerateAutoNumberHandler'] ?? $container->load('getGenerateAutoNumberHandlerService'));
            yield 1 => ($container->privates['Akeneo\\Pim\\Automation\\IdentifierGenerator\\Application\\Generate\\Property\\GenerateFreeTextHandler'] ?? ($container->privates['Akeneo\\Pim\\Automation\\IdentifierGenerator\\Application\\Generate\\Property\\GenerateFreeTextHandler'] = new \Akeneo\Pim\Automation\IdentifierGenerator\Application\Generate\Property\GenerateFreeTextHandler()));
        }, 2)), $b, $c, $d);
    }
}
