<?php

namespace ContainerRWxfJwK;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getCreateJobExecutionHandlerInterfaceService extends KernelProdContainer
{
    /*
     * Gets the private 'Akeneo\Tool\Bundle\BatchBundle\JobExecution\CreateJobExecutionHandlerInterface' shared service.
     *
     * @return \Akeneo\Tool\Bundle\BatchBundle\JobExecution\CreateJobExecutionHandler
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Tool/Bundle/BatchBundle/JobExecution/CreateJobExecutionHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Tool/Bundle/BatchBundle/JobExecution/CreateJobExecutionHandler.php';

        $a = ($container->privates['akeneo_batch.job_repository'] ?? $container->load('getAkeneoBatch_JobRepositoryService'));

        if (isset($container->privates['Akeneo\\Tool\\Bundle\\BatchBundle\\JobExecution\\CreateJobExecutionHandlerInterface'])) {
            return $container->privates['Akeneo\\Tool\\Bundle\\BatchBundle\\JobExecution\\CreateJobExecutionHandlerInterface'];
        }
        $b = ($container->services['akeneo_batch.job.job_registry'] ?? $container->load('getAkeneoBatch_Job_JobRegistryService'));

        if (isset($container->privates['Akeneo\\Tool\\Bundle\\BatchBundle\\JobExecution\\CreateJobExecutionHandlerInterface'])) {
            return $container->privates['Akeneo\\Tool\\Bundle\\BatchBundle\\JobExecution\\CreateJobExecutionHandlerInterface'];
        }
        $c = ($container->privates['akeneo_batch.job.job_parameters_validator'] ?? $container->load('getAkeneoBatch_Job_JobParametersValidatorService'));

        if (isset($container->privates['Akeneo\\Tool\\Bundle\\BatchBundle\\JobExecution\\CreateJobExecutionHandlerInterface'])) {
            return $container->privates['Akeneo\\Tool\\Bundle\\BatchBundle\\JobExecution\\CreateJobExecutionHandlerInterface'];
        }
        $d = ($container->services['.container.private.validator'] ?? $container->load('get_Container_Private_ValidatorService'));

        if (isset($container->privates['Akeneo\\Tool\\Bundle\\BatchBundle\\JobExecution\\CreateJobExecutionHandlerInterface'])) {
            return $container->privates['Akeneo\\Tool\\Bundle\\BatchBundle\\JobExecution\\CreateJobExecutionHandlerInterface'];
        }

        return $container->privates['Akeneo\\Tool\\Bundle\\BatchBundle\\JobExecution\\CreateJobExecutionHandlerInterface'] = new \Akeneo\Tool\Bundle\BatchBundle\JobExecution\CreateJobExecutionHandler($a, ($container->services['doctrine'] ?? $container->getDoctrineService()), $b, ($container->privates['akeneo_batch.job_parameters_factory'] ?? $container->load('getAkeneoBatch_JobParametersFactoryService')), $c, $d);
    }
}
