<?php

namespace ContainerRWxfJwK;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getPimCatalog_ProductValues_RemoveValuesFromProductsService extends KernelProdContainer
{
    /*
     * Gets the public 'pim_catalog.product_values.remove_values_from_products' shared service.
     *
     * @return \Akeneo\Pim\Enrichment\Bundle\Product\RemoveValuesFromProducts
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Pim/Enrichment/Bundle/Product/RemoveValuesFromProducts.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Platform/Bundle/FrameworkBundle/Service/ResilientDeadlockConnection.php';

        $a = ($container->services['doctrine.dbal.default_connection'] ?? $container->getDoctrine_Dbal_DefaultConnectionService());

        if (isset($container->services['pim_catalog.product_values.remove_values_from_products'])) {
            return $container->services['pim_catalog.product_values.remove_values_from_products'];
        }
        $b = ($container->services['event_dispatcher'] ?? $container->getEventDispatcherService());

        if (isset($container->services['pim_catalog.product_values.remove_values_from_products'])) {
            return $container->services['pim_catalog.product_values.remove_values_from_products'];
        }

        return $container->services['pim_catalog.product_values.remove_values_from_products'] = new \Akeneo\Pim\Enrichment\Bundle\Product\RemoveValuesFromProducts(($container->privates['pim_catalog.repository.product'] ?? $container->load('getPimCatalog_Repository_ProductService')), $a, $b, ($container->privates['pim_connector.doctrine.cache_clearer'] ?? $container->load('getPimConnector_Doctrine_CacheClearerService')), new \Akeneo\Platform\Bundle\FrameworkBundle\Service\ResilientDeadlockConnection($a, ($container->privates['monolog.logger'] ?? $container->load('getMonolog_LoggerService'))));
    }
}
