<?php

namespace ContainerRWxfJwK;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getUpdateConnectionHandlerService extends KernelProdContainer
{
    /*
     * Gets the private 'Akeneo\Connectivity\Connection\Application\Settings\Command\UpdateConnectionHandler' shared service.
     *
     * @return \Akeneo\Connectivity\Connection\Application\Settings\Command\UpdateConnectionHandler
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Connectivity/Connection/back/Application/Settings/Command/UpdateConnectionHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Connectivity/Connection/back/Application/Settings/Service/UpdateUserPermissionsInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Connectivity/Connection/back/Infrastructure/Service/User/UpdateUserPermissions.php';

        return $container->privates['Akeneo\\Connectivity\\Connection\\Application\\Settings\\Command\\UpdateConnectionHandler'] = new \Akeneo\Connectivity\Connection\Application\Settings\Command\UpdateConnectionHandler(($container->services['.container.private.validator'] ?? $container->load('get_Container_Private_ValidatorService')), ($container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Settings\\Persistence\\DbalConnectionRepository'] ?? $container->load('getDbalConnectionRepositoryService')), new \Akeneo\Connectivity\Connection\Infrastructure\Service\User\UpdateUserPermissions(($container->privates['pim_user.manager'] ?? $container->load('getPimUser_ManagerService')), ($container->services['pim_user.repository.role'] ?? $container->load('getPimUser_Repository_RoleService')), ($container->privates['pim_user.repository.group'] ?? $container->load('getPimUser_Repository_GroupService')), ($container->privates['pim_user.updater.user'] ?? $container->load('getPimUser_Updater_UserService'))));
    }
}
