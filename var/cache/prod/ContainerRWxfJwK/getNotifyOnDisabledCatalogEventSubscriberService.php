<?php

namespace ContainerRWxfJwK;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getNotifyOnDisabledCatalogEventSubscriberService extends KernelProdContainer
{
    /*
     * Gets the private 'Akeneo\Connectivity\Connection\Infrastructure\Apps\EventSubscriber\NotifyOnDisabledCatalogEventSubscriber' shared service.
     *
     * @return \Akeneo\Connectivity\Connection\Infrastructure\Apps\EventSubscriber\NotifyOnDisabledCatalogEventSubscriber
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Connectivity/Connection/back/Infrastructure/Apps/EventSubscriber/NotifyOnDisabledCatalogEventSubscriber.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Connectivity/Connection/back/Application/Apps/Notifier/DisabledCatalogNotifierInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Connectivity/Connection/back/Infrastructure/Apps/Notifier/DisabledCatalogNotifier.php';

        $a = ($container->privates['Akeneo\\Catalogs\\ServiceAPI\\Messenger\\QueryBus'] ?? $container->load('getQueryBusService'));

        if (isset($container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Apps\\EventSubscriber\\NotifyOnDisabledCatalogEventSubscriber'])) {
            return $container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Apps\\EventSubscriber\\NotifyOnDisabledCatalogEventSubscriber'];
        }
        $b = ($container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Apps\\Persistence\\FindAllUsernamesWithAclQuery'] ?? $container->load('getFindAllUsernamesWithAclQueryService'));

        if (isset($container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Apps\\EventSubscriber\\NotifyOnDisabledCatalogEventSubscriber'])) {
            return $container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Apps\\EventSubscriber\\NotifyOnDisabledCatalogEventSubscriber'];
        }
        $c = ($container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Apps\\Persistence\\FindOneConnectedAppByUserIdentifierQuery'] ?? $container->load('getFindOneConnectedAppByUserIdentifierQueryService'));

        if (isset($container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Apps\\EventSubscriber\\NotifyOnDisabledCatalogEventSubscriber'])) {
            return $container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Apps\\EventSubscriber\\NotifyOnDisabledCatalogEventSubscriber'];
        }
        $d = ($container->privates['pim_notification.notifier'] ?? $container->load('getPimNotification_NotifierService'));

        if (isset($container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Apps\\EventSubscriber\\NotifyOnDisabledCatalogEventSubscriber'])) {
            return $container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Apps\\EventSubscriber\\NotifyOnDisabledCatalogEventSubscriber'];
        }

        return $container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Apps\\EventSubscriber\\NotifyOnDisabledCatalogEventSubscriber'] = new \Akeneo\Connectivity\Connection\Infrastructure\Apps\EventSubscriber\NotifyOnDisabledCatalogEventSubscriber($a, new \Akeneo\Connectivity\Connection\Infrastructure\Apps\Notifier\DisabledCatalogNotifier($b, $c, $d), ($container->privates['monolog.logger'] ?? $container->load('getMonolog_LoggerService')));
    }
}
