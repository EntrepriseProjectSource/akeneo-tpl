<?php

namespace ContainerRWxfJwK;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getGetWizardDataActionService extends KernelProdContainer
{
    /*
     * Gets the public 'Akeneo\Connectivity\Connection\Infrastructure\Apps\Controller\Internal\GetWizardDataAction' shared service.
     *
     * @return \Akeneo\Connectivity\Connection\Infrastructure\Apps\Controller\Internal\GetWizardDataAction
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Connectivity/Connection/back/Infrastructure/Apps/Controller/Internal/GetWizardDataAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Connectivity/Connection/back/Domain/Apps/Persistence/HasUserConsentForAppQueryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/akeneo/pim-community-dev/src/Akeneo/Connectivity/Connection/back/Infrastructure/Apps/Persistence/HasUserConsentForAppQuery.php';

        return $container->services['Akeneo\\Connectivity\\Connection\\Infrastructure\\Apps\\Controller\\Internal\\GetWizardDataAction'] = new \Akeneo\Connectivity\Connection\Infrastructure\Apps\Controller\Internal\GetWizardDataAction(($container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Marketplace\\Persistence\\GetAppQuery'] ?? $container->load('getGetAppQueryService')), ($container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Apps\\Session\\AppAuthorizationSession'] ?? $container->load('getAppAuthorizationSessionService')), ($container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Apps\\Security\\ScopeMapperRegistry'] ?? $container->load('getScopeMapperRegistryService')), ($container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Apps\\Persistence\\FindOneConnectedAppByIdQuery'] ?? $container->load('getFindOneConnectedAppByIdQueryService')), ($container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Apps\\ScopeListComparator'] ?? $container->load('getScopeListComparatorService')), ($container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Apps\\Security\\ConnectedPimUserProvider'] ?? $container->load('getConnectedPimUserProviderService')), ($container->privates['Akeneo\\Connectivity\\Connection\\Infrastructure\\Apps\\Persistence\\GetUserConsentedAuthenticationScopesQuery'] ?? $container->load('getGetUserConsentedAuthenticationScopesQueryService')), new \Akeneo\Connectivity\Connection\Infrastructure\Apps\Persistence\HasUserConsentForAppQuery(($container->services['doctrine.dbal.default_connection'] ?? $container->getDoctrine_Dbal_DefaultConnectionService())));
    }
}
